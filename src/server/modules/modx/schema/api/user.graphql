type User {
  id: Int!
  username: String
  fullname: String
  profileId: Int!
  sudo: Boolean
  image: String
  email: String
  hasEmail: Boolean
  Resources(
    first: Int
    skip: Int
    where: ResourceWhereInput
    orderBy: ResourceOrderByInput
  ): [Resource!]!
}

input UserWhereInput {
  id: Int
  id_in: [Int!]
  id_not_in: [Int!]
  username: String
  email: String
  blocked: Boolean
  OR: [UserWhereInput!]
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
}

input UserWhereUniqueInput {
  id: Int
  username: String
}

type UsersDebugResponse {
  SQL: String!
  users: [User!]!
}

type UserConnection {
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

type AggregateUser {
  count: Int!
}

type UserEdge {
  node: User!
}

type AuthPayload {
  success: Boolean!
  message: String
  errors: [Error!]!
  token: String
  data: User
}

# input SigninData{
#   login_context: String
#   modahsh: String
#   returnUrl: String
#   username: String!
#   password: String!
#   login: Boolean
# }


# type LoginPayload{
#   user_id: Int
#   t: String
# }

# type SigninResponse {
#   success: Boolean!
#   message: String
#   data: Json
#   object: LoginPayload
# }

