
type Topic {
  id: Int!
  name: String!
  pagetitle: String!
  longtitle: String
  content: Json
  alias: String
  published: Boolean!
  deleted: Boolean!
  hidemenu: Boolean!
  searchable: Boolean!
  class_key: String!
  context_key: String!
  uri: String!
  uri_override: Boolean!
  createdby: Int!
  template: Int!
  publishedon: DateTime
  createdAt: DateTime!
  updatedAt: DateTime
  CreatedBy: User!
  Tags: [TopicTag!]!
  blog_id: Int!
  Blog: Blog
  Comments(
    where: CommentWhereInput
    orderBy: CommentOrderByInput
    skip: Int
    first: Int
  ): [Comment!]!
  thread_id: Int
  Thread: Thread
}


input TopicWhereUniqueInput {
  id: Int
  uri: String
}

input TopicWhereInput {
  id: Int
  blog_id: Int
  uri: String
  tag: String
  tag_in: [String!]
}

# input TopicByTagsWhereInput {
#   id: Int
#   blog_id: Int
#   uri: String
#   tag: String!
# }


enum TopicOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TopicConnection {
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}


type AggregateTopic {
  count: Int!
}

type TopicEdge {
  node: Topic!
}