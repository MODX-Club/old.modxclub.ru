import React, {Component} from 'react';

import PropTypes from 'prop-types';

const defaultProps = {}

export default class ReactDecliner extends Component{

	constructor(props){

		super(props);

		this.state = {}
	}

	render(){

		let {
			num,
			words,
			insert,
			NumElement,
			NumElementProps,
		} = this.props;


		// let words = arr;
		let absNum = Math.abs(num);
		let cases = [2, 0, 1, 1, 1, 2];
		let result = '';

		let num_element;

		insert = insert || false;

		try {
			if (words.length !== 3) throw new SyntaxError('array must have 3 elements');

			words.map(function(el, i) {
				if (typeof(el) !== 'string') throw new TypeError('element #' + (i + 1) + ' is not a string in array [' + words + ']');
			});

			if (typeof(num) !== 'number') throw new TypeError('decline() argument is not a number');

			if (typeof(insert) !== 'boolean') throw new TypeError('second argument in decline() should be boolean');

			result = words[ (absNum % 1 !== 0) ? 1 : (absNum % 100 > 4 && absNum % 100 < 20) ? 2 : cases[(absNum % 10 < 5) ? absNum % 10 : 5] ];
		} catch (e) {
			console.error('decliner error: ' + e.name + ' - ' + e.message);
		}

		if(insert){
			NumElement = NumElement || 'span';
			num_element = <NumElement
				{...NumElementProps}
			>{num} </NumElement>;
		}

		return <span>{num_element}{result}</span>;
	}
}

ReactDecliner.defaultProps = defaultProps;

ReactDecliner.propTypes = {
	num: PropTypes.number.isRequired,
	words: PropTypes.array.isRequired,
	insert: PropTypes.bool,
	NumElementProps: PropTypes.object,
}
