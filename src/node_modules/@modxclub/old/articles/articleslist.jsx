import style from './styles';

import React, { Component } from 'react';

import PropTypes from 'prop-types';

import {browserHistory} from 'react-router-dom';

import Grid from "material-ui/Grid";
import Button from "material-ui/Button";
import TextField from "material-ui/TextField";
import Checkbox, {LabelCheckbox} from "material-ui/Checkbox";

import Article from './article';
// import ArticleCard from './articlecard';
import Pagination from '../pagination';
import BlogsSelectField from '../fields/blogs';

import WarningMessage from '../fields/warning';

// window.browserHistory = browserHistory;

export default class ArticlesList extends Component {

  static contextTypes = {
    request: PropTypes.func.isRequired,
    Location: PropTypes.object.isRequired,
    setPagetitle: PropTypes.func.isRequired,
  };

  constructor(props){

    super(props);

    this.state = {
      query: '',
      blogs: [],
    };

    if(browserHistory){
      // let location = browserHistory.getCurrentLocation();

      // location.query && Object.assign(this.state, location.query);
    }

  }

  componentDidMount(){
    
    this.loadBlogs();
    this.setTitle();
  }
  
  componentDidUpdate(prevProps, prevState){
    // console.log("ArticlesList componentDidUpdate", prevProps, prevState);

    this.setTitle();
  }

  setTitle(){

    let {
      Location,
      setPagetitle,
    } = this.context;

    if(!Location){
      return;
    }

    let {
      pagetitle,
    } = this.props;

    let {
      blogs: siteBlogs,
    } = this.state;

    pagetitle = pagetitle || "Топики";

    // console.log('Location', Location);


    let {
      query,
      page,
      withMyComments,
    } = Location.query || {};

    let blogs = Location && Location.query && Location && Location.query['blogs[]'] || [];

    /*
      Если это не массив
    */
    if(blogs && !Array.isArray(blogs)){
      blogs = [blogs];
    }



    if(query){
      pagetitle += `. Результаты поиска "${this.state.query}"`;
    }

    if(withMyComments == "1"){
      pagetitle += ` С моими комментариями`;
    }

    if(blogs && blogs.length && siteBlogs && siteBlogs.length){

      let titleBlogs = [];

      blogs.map(n => {
        siteBlogs.find(blog => {
          if(blog.id == n){
            titleBlogs.push(`"${blog.pagetitle}"`);
          }
        });
      });

      if(titleBlogs.length){
        pagetitle += ` В разделах: `;
        pagetitle += titleBlogs.join(", ");
      }
    }

    if(page){

      pagetitle += ` Страница №${page}`;
    }

    setPagetitle(pagetitle);
    // (typeof window != "undefined") && window.document && (window.document.title = title);

    return;
  }

  search(event){

    let {
      name,
      value,
    } = event.target;

    this.updateState(name, value);
  }

  updateState(name, value){

    let newState = {};
    newState[name] = value;

    newState.page=undefined;

    this.setState(newState, () => {

      if(browserHistory){
        let location = browserHistory.getCurrentLocation();
        let query = location.query || {};

        delete query.page;

        location.query = Object.assign(location.query, newState);

        browserHistory.push(location);
      }

    });
  }

  loadBlogs(){

   let {
     request,
   } = this.context;

   request('blogs', false, 'blogs/getdata', {
     limit: 0,
     format: "json",
   }, {
     callback: (data, errors) => {
       // console.log("blogs callback", data, errors);

       if(data.success){
         this.setState({
           blogs: data.object || [],
         });
       }
     }
   });
  }

  render(){

    let {
      blogs: siteBlogs,
    } = this.state;

    let {
      Location,
    } = this.context;

    let {
      articles,
      showFilters,
    } = this.props;

    // let {
    //   query,
    // } = this.state

    let {
      query,
      withMyComments,
      my,
      showBlogFilters,
      // blogs,
    } = Location && Location.query || {};

    let blogs = Location && Location.query && Location && Location.query['blogs[]'] || [];

    /*
      Если это не массив
    */
    if(blogs && !Array.isArray(blogs)){
      blogs = [blogs];
    }

    let {
      page,
      limit,
      total,
    } = articles || {};

    // console.log("Location", Location, blogs, Location && Location.query, Location && Location.query && Location.query.blogs);

    let content;

    if(!articles || !articles.object || !articles.object.length){
      content = <WarningMessage>Не были получены данные топиков</WarningMessage>;
    }
    else{
      content = articles.object.map((article) => {
        return (
          <Article
            key={article.id}
            fullView={false}
            document={article}
            documentActions={this.props.documentActions}
            comments={article.comments}
            user={this.props.user}
          />
        );
      });
    }



    // else
    return (
      <div className="">

        {showFilters
          ?
            <Grid
              container
              // align="flex-end"
              align="center"
            >
              <Grid
                item
                xs={12}          
                sm={4}          
                md={4}
                lg
              >
                
                <TextField 
                  label="Поиск по содержимому"
                  name="query"
                  value={query || ''}
                  onChange={event => this.search(event)}
                />

              </Grid>

              <Grid
                item
              >

                <LabelCheckbox 
                  label="Мои"
                  name="my"
                  checked={my == "1" ? true : false}
                  onChange={event => {
                    this.updateState("my", my == "1" ? undefined : 1);
                  }}
                />

              </Grid>

              <Grid
                item
              >

                <LabelCheckbox 
                  label="С моими комментариями"
                  name="withMyComments"
                  checked={withMyComments == "1" ? true : false}
                  onChange={event => {
                    this.updateState("withMyComments", withMyComments == "1" ? undefined : 1);
                  }}
                />

              </Grid>

              <Grid
                item
              >
                <Button
                  onTouchTap={event => {

                    if(showBlogFilters == "1" && blogs.length){
                      this.updateState("blogs[]", undefined);
                    }

                    this.updateState("showBlogFilters", showBlogFilters == "1" ? undefined : "1");
                  }}
                >
                  Фильтр по разделам
                </Button>
              </Grid>

              <Grid
                item
                xs={12}
              >
                

                {showBlogFilters
                  ?
                    <BlogsSelectField
                      blogs={siteBlogs}
                      checkedBlogs={blogs}
                      onChange={event =>{

                        let {
                          name,
                          value,
                          checked,
                        } = event.target;

                        // console.log('onChange 2', name, value, checked);

                        let index = blogs.indexOf(name);

                        // console.log("Finded index", index);

                        if(checked){
                          if(index === -1){
                            blogs.push(name);
                          }
                        }
                        else{
                          if(index != -1){
                            blogs.splice(index, 1);
                          }
                        }

                        this.updateState("blogs[]", blogs);
                      }}
                    />
                  :
                  null
                }


              </Grid>
              
            </Grid>
          :
          null}

        {content}

        <Pagination
          page={page || 1}
          limit={limit}
          total={total}
        />
      </div>
    );
  }
}
