import './styles/styles.less';

import React, { Component } from 'react';

import PropTypes from 'prop-types';

import Card, { CardContent, CardActions, CardHeader, CardMedia } from 'material-ui/Card';
import Button from 'material-ui/Button';
import IconButton from 'material-ui/IconButton';
import Avatar from '../../../Avatar';
import CompaniesList from '../../../fields/user/companies_list';
import Chip from 'material-ui/Chip';
import Dialog from 'material-ui/Dialog';
import Grid from 'material-ui/Grid';
import Typography from 'material-ui/Typography';
import TextField from 'material-ui/TextField';

import EditIcon from 'material-ui-icons/ModeEdit';
import MembersIcon from 'material-ui-icons/People';
import SaveIcon from 'material-ui-icons/Save';
import FaceIcon from 'material-ui-icons/Face';

import { Link } from 'react-router-dom';

import MembersListEditor from './memberslist';
 
import { Uploader as ImagesUploader } from "@prisma-cms/ui";
 

class MembersAvatar extends Component {

  render() {

    let {
      childrenClassName,
      ...other
    } = this.props;

    return <MembersIcon
      style={{
        marginLeft: 4,
        height: 26,
        width: 26,
      }}
    />
  }
}


export default class Work extends Component {

  static contextTypes = {
    user: PropTypes.object.isRequired,
    updateProject: PropTypes.func.isRequired,
    saveProject: PropTypes.func.isRequired,
  };

  static propTypes = {
    inEditMode: PropTypes.bool,
  };

  static defaultProps = {
    editMembers: false,
  };

  constructor(props) {

    super(props);

    // var state = props.data || {};
    var state = {};

    Object.assign(state, {
      open: props.open || false,
      openedImage: null,
      editMembers: props.editMembers,
    });

    this.state = state;
  }

  handleOpen = (image) => {
    // console.log('handleOpen', this);
    this.setState({
      open: true,
      openedImage: image,
    });
  };

  handleClose = () => {
    // console.log('handleClose', this);
    this.setState({
      open: false,
      openedImage: undefined,
    });
  };

  addMember() {

    let {
      item,
    } = this.props;

    let {
      updateProject,
    } = this.context;

    let {
      members,
    } = item;

    let member = {
      // id: null,
      username: '',
      photo: '',
      services: [],
    }

    members = members || [];

    members.push(member);

    updateProject(item, { members });
  }

  removeMember(member) {

    // console.log('removeMember', member);

    let {
      item,
    } = this.props;

    let {
      updateProject,
    } = this.context;

    let {
      members,
    } = item;

    if (!members) {
      return;
    }

    let memberIndex = members.findIndex(n => n === member);

    if (memberIndex != -1) {

      members.splice(memberIndex, 1);

      updateProject(item, { members });
    }

    return;
  }



  onChange = (event) => {

    let {
      name,
      value,
    } = event.target;

    let data = {};

    data[name] = value;

    // this.setState(newState);

    return this.updateProject(data);
  }



  updateProject(data) {
    let {
      item,
    } = this.props;

    let {
      updateProject,
    } = this.context;

    return updateProject(item, data);
  }

  renderField(Class, props) {

    let {
      name,
      helperText,
      ...other
    } = props;

    let {
      item,
    } = this.props;

    if (!item) {
      console.error("Не был получен объект");
      return;
    }

    let {
      _errors,
    } = item;

    let value = item[name] || "";

    let error = _errors && _errors[name] || false;

    // console.log("errors", name, error, _errors && _errors[name], _errors, item);

    return <Class
      onChange={this.onChange}
      name={name}
      value={value}
      error={error ? true : false}
      helperText={error || helperText || undefined}
      onFocus={event => {

        if (_errors && _errors[name]) {
          _errors[name] = null;
          this.forceUpdate();
        }
      }}
      {...other}
    />
  }


  render() {

    let {
      openedImage,
      editMembers,
    } = this.state;

    let {
      inEditMode,
      fullwidth,
      ...other
    } = this.props;

    let {
      user: {
        user,
      },
      updateProject,
      saveProject,
    } = this.context;

    // var item = this.state;

    let {
      item,
    } = this.props;

    // console.log('project item', item);

    if (!item) {
      return null;
    }

    let {
      id,
      id: project_id,
      pagetitle,
      longtitle,
      author_username,
      author_fullname,
      author_photo,
      author_thumb,
      companies,
      developer_id,
      developer_uri,
      developer_title,
      createdby,
      uri,
      image,
      thumb,
      members: project_members,
      _isDirty,
      _errors,
    } = item;

    author_thumb = author_thumb || author_photo;

    thumb = thumb || image;

    let url;

    if (pagetitle) {
      url = (/https?:\/\//i.test(pagetitle) ? pagetitle : `http://${pagetitle}`);
    }

    /*
     * Участники проекта
     * */
    var members = [];

    if (!project_members || !Array.isArray(project_members)) {
      project_members = [];
    }

    if (inEditMode) {
      members.push(<Chip
        key="create"
        className="link"
        style={{
          margin: 4,
        }}
        label={project_members.length ? "Редактировать участников" : "Добавить участника"}
        avatar={<MembersAvatar />}
        onClick={event => {
          this.setState({
            editMembers: true,
          });
        }}
      >
      </Chip>);
    }

    if (project_members.length) {
      project_members.map(function (member) {

        let {
          id: member_id,
        } = member;

        members.push(<Link
          key={member_id}
          to={`/profile/${member.username}`}
          href={`/profile/${member.username}`}
          className="underline-none"
        >
          <Chip
            onRequestDelete={inEditMode ? (event) => {
              event.stopPropagation();
              event.preventDefault();
              this.removeMember(member);
            } : undefined}
            className="link"
            style={{
              margin: 4,
            }}
            label={member.fullname || member.username}
            avatar={<Avatar type="small" avatar={member.photo} username={(member.fullname || member.username).substr(0, 1).toUpperCase()} />}
          >
          </Chip>
        </Link>);
      }, this);
    }


    /*
     * Используемые компоненты
     * */
    var extras = [];

    if (item.extras && item.extras.length) {
      item.extras.map(function (extra) {


        extras.push(<Chip
          key={extra.id}
          style={{
            margin: 4,
          }}
          label={extra.pagetitle}
        >
        </Chip>);
      }, this);
    }

    var dialog_actions = [];

    if (this.state.url != '') {
      dialog_actions.push(
        <Button
          key="link"
          href={this.state.url}
          target="_blank"
          rel="nofollow"
          secondary={true}
        >Перейти на сайт</Button>
      );
    }

    dialog_actions.push(
      <Button
        key="close"
        onTouchTap={this.handleClose}
      >Закрыть</Button>
    );


    let actions = [];
    let bottom_actions = [];

    if (user && user.id == createdby) {

      if (_isDirty) {
        actions.push(
          <IconButton
            key="save"
            onTouchTap={event => saveProject(item)}
          >
            <SaveIcon
              color="red"
            />
          </IconButton>
        );

        bottom_actions.push(
          <Button
            key="save"
            onTouchTap={event => saveProject(item)}
          >
            <SaveIcon
              color="red"
            /> Сохранить
          </Button>
        );
      }

      if (!inEditMode) {
        actions.push(<Link
          key="edit"
          to={`/office/portfolio/edit/${project_id}`}
          href={`/office/portfolio/edit/${project_id}`}
          style={{
            textDecoration: 'none',
          }}
        >
          <IconButton
          >
            <EditIcon />
          </IconButton>
        </Link>
        );

        bottom_actions.push(<Link
          key="edit"
          to={`/office/portfolio/edit/${project_id}`}
          href={`/office/portfolio/edit/${project_id}`}
          style={{
            textDecoration: 'none',
          }}
        >
          <Button
          >
            <EditIcon /> Редактировать
          </Button>
        </Link>);
      }
    }

    let gridSize;

    if (fullwidth) {
      gridSize = {
        xs: 12,
        // md: 8,
        lg: 8,
        xl: 6,
      }
    }
    else {
      gridSize = {
        xs: 12,
        md: 6,
        lg: 3,
      }
    }

    return <Grid
      item
      {...gridSize}
      // xl={3}
      className="portfolio-card__wrapper"
    >
      <Card
        style={{
          height: "100%",
        }}
      >
        <CardHeader
          title={<Link
            to={`/profile/${author_username}`}
            href={`/profile/${author_username}`}
            style={{
              textDecoration: 'none',
            }}
          >
            {author_fullname || author_username}
          </Link>}
          subheader={companies && <CompaniesList companies={companies} /> || undefined}
          avatar={<div>

            {actions}

            <Link
              to={`/profile/${author_username}`}
              href={`/profile/${author_username}`}
              className="underline-none"
            >
              <Avatar
                avatar={author_thumb}
                username={item.author_fullname || item.author_username}
              />
            </Link>

          </div>}
        />

        <CardContent>

          {inEditMode
            ?

            this.renderField(TextField, {
              label: "Название проекта",
              name: "longtitle",
            })

            :
            <Typography
              type="title"
              style={{
                // textAlign: 'right',
                padding: 3,
              }}
            >

              <Link
                to={uri}
                href={uri}
                title={longtitle}
                className="underline-none"
              >
                {longtitle}
              </Link>
            </Typography>
          }

          {inEditMode
            ?
            <div>

              {_errors && _errors['image']
                ?
                <Typography
                  style={{
                    color: 'red',
                  }}
                >
                  {_errors['image']}
                </Typography>
                :
                null
              }

              <ImagesUploader
                label={thumb ? "Заменить изображение" : "Загрузить изображение"}
                multiple={false}
                dataName="file[]"
                url="/assets/components/modxsite/connectors/connector.php?pub_action=images/upload"
                optimisticPreviews
                onLoadEnd={(err, response) => {
                  console.log('onLoadEnd', err, response);

                  if (err && err.message) {
                    console.error(err);
                    this.updateProject({
                      _errors: {
                        image: err.message,
                      }
                    });
                  }
                  else {

                    console.log('response', response);

                    let {
                      0: image,
                    } = response.object || {};

                    console.log('response image', image);

                    if (image && image.url) {
                      this.updateProject({
                        thumb: image.thumb,
                        image: image.url,
                        newImage: image.url,
                      });
                    }

                    return;
                  }
                }}
              />

            </div>
            :
            null
          }

        </CardContent>

        <CardMedia
        >

          <div
            className="overlay"
            onTouchTap={event => {

              if (inEditMode) {

              }
              else {
                this.handleOpen(image);
              }
            }}
          >
            <img src={thumb} />
          </div>






        </CardMedia>

        <CardContent>

          {inEditMode
            ?

            this.renderField(TextField, {
              label: "URL-адрес сайта",
              name: "pagetitle",
            })

            :
            <Typography
              type="subheading"
              style={{
                textAlign: 'right',
                padding: 5,
              }}
            >

              {url
                ?
                <a
                  href={url}
                  target="_blank"
                  title={longtitle}
                >{pagetitle}</a>
                :
                null
              }
            </Typography>
          }

          {item.content}
        </CardContent>


        {developer_id
          ?
          <CardContent>

            Компания-разработчик
                <div
              style={{
                display: 'flex',
                flexWrap: 'wrap',
              }}
            >
              <Link
                to={developer_uri}
                href={developer_uri}
                style={{
                  textDecoration: 'none',
                }}
                title={developer_title}
              >
                <Chip
                  label={developer_title}
                  className="link"
                />
              </Link>
            </div>
          </CardContent>
          :
          null
        }


        {members && members.length
          ?
          <CardContent>

            <Typography
              type="subheading"
            >
              Участники проекта {editMembers
                ?
                <Button
                  onTouchTap={event => {
                    this.setState({
                      editMembers: false,
                    })
                  }}
                >
                  Скрыть детали
                      </Button>
                :
                null
              }
            </Typography>

            <div
              style={{
                display: 'flex',
                flexWrap: 'wrap',
              }}
            >

              {editMembers
                ?
                <MembersListEditor
                  item={item}
                  updateProject={updateProject}
                  addMember={() => this.addMember()}
                  removeMember={(member) => this.removeMember(member)}
                />
                :
                members
              }

            </div>
          </CardContent>
          :
          null
        }





        {extras.length ?
          <CardContent>
            Используемые компоненты
              <div
              style={{
                display: 'flex',
                flexWrap: 'wrap',
              }}
            >
              {extras}
            </div>
          </CardContent>
          : null}

        {bottom_actions.length
          ?
          <CardActions>
            {bottom_actions}
          </CardActions>
          :
          null}

        <Dialog
          title={this.state.pagetitle}
          onRequestClose={this.handleClose}
          modal={false}
          contentStyle={{
            maxWidth: '100%',
          }}
          open={this.state.open && openedImage ? true : false}
          autoScrollBodyContent={true}
          actions={dialog_actions}
        >
          <img
            className="editor-image opened"
            src={openedImage}
            style={{
              // minHeight: typeof window != "undefined" ? window.innerHeight * 0.8 : undefined,
            }}
          />
        </Dialog>
      </Card>
    </Grid>;
  }

}

