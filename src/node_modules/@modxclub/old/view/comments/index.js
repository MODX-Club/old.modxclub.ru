import React, {Component} from 'react';

import PropTypes from 'prop-types';

import IndexView from '../index/';

import ChatMessage from '../../chat/message/index';

import Avatar from '../../Avatar';
import Card, { CardHeader, CardMedia, CardContent, CardActions } from 'material-ui/Card';
import { Link } from 'react-router-dom';
import Typography from 'material-ui/Typography';
import Grid from 'material-ui/Grid';
import LinkIcon from 'material-ui-icons/Link';
import Pagination from '../../pagination';

export default class CommentsView extends IndexView {

  // static contextTypes = {
  //   Location: PropTypes.object.isRequired,
  // }

  constructor(props){

    super(props);

    Object.assign(this.state, {
      showCommentLink: true,
    });
  }



  // componentWillReceiveProps(nextProps){

  //   // console.log("Topics componentWillReceiveProps", nextProps);

  //   if(nextProps.document.document.view == "Topics"){
  //     this.setState({
  //       "document": nextProps.document,
  //       "articles": nextProps.document.document.data,
  //     });
  //   }

  //   return true;
  // }


  // componentWillMount(){

  // }

  // shouldComponentUpdate(nextProps, nextState){
  //   // alert('shouldComponentUpdate');
  //   return this.state.document != false;
  // }

  // componentDidUpdate(prevProps, prevState){
  //   console.log("Topics componentDidUpdate", prevProps, prevState);

  // }

  setPagetitle(pagetitle){

    return super.setPagetitle(pagetitle || "Последние комментарии");
  }


  renderComment(comment){

    let {
      showCommentLink,
    } = this.state;

    let {
      classes,
      user,
      documentActions,
    } = this.props;

    let {
      id,
      resource_pagetitle: topic_title,
      resource_uri: topic_uri,
    } = comment;

    return <Card
      // style={{
      //   height: '100%',
      // }}
    >
      <CardHeader
        className={classes.header}
        // avatar={
        //   <Link
        //     to={`/profile/${document.author_username}/`}
        //     href={`/profile/${document.author_username}/`}
        //     className="underline-none"
        //   >
        //     <Avatar username={author} avatar={author_avatar}/>
        //   </Link>
        // }
        title={<Grid
          container
          gutter={0}
        >
          <Grid
            item
            xs
          >
            <Link
              href={topic_uri} 
              to={topic_uri} 
              className="underline-none Card--title"
            >
              {topic_title}
            </Link>
          </Grid>

          {showCommentLink && id
            ?
              <Link
                to={`/comments/comment-${id}.html`}
                href={`/comments/comment-${id}.html`}
              >
                <LinkIcon />
              </Link>
            :
            null
          }
        </Grid>}
      />

      <CardContent>
        <ChatMessage
          key={id} 
          item={comment}
          user={user.user}
          documentActions={documentActions}
          // document={document}
        />
      </CardContent> 

    </Card>
  }

  contentBlock(){


    let {
      classes,
      user,
      documentActions,
    } = this.props;

    let {
      document
    } = this.props.document;

    let {
      data,
    } = document || {};

    let {
      object: comments,
      page,
      total,
      limit,
    } = data || {};

    // console.log('comments', comments);
    // console.log('total', total, page, limit);

    if(!comments || !comments.length){

      return (<h3>Комментарии не найдены</h3>);
    }

    let content = [];

    comments.map(comment => {

      let {
        id,
      } = comment;


      content.push(<Grid
        key={id || `comment_${content.length}`}
        item
        xs={12}
      >
        {this.renderComment(comment)}
      </Grid>);
 
    });

    return <Grid
      container
    >
      {content}

      <Grid
        item
        xs={12}
      >
        {total && <Pagination
          page={page || 1}
          limit={limit}
          total={total}
        />}
      </Grid>

    </Grid>
  }

  // render(){

  //   let {
  //     articles,
  //     showFilters,
  //   } = this.state;

  //   if(!articles || !articles.object){
  //     return (<h3>Загружаем топики...</h3>);
  //   }

  //   return <Articles
  //     articles={articles}
  //     documentActions={this.props.documentActions}
  //     user={this.props.user && this.props.user.user}
  //     fullView={false}
  //     pagetitle={this.getTitle()}
  //     showFilters={showFilters}
  //   />
  // }
}

