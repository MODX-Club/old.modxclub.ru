import React, { Component } from 'react';
import PropTypes from 'prop-types';


import Typography from 'material-ui/Typography';
import TextField from 'material-ui/TextField';
import Card, { CardActions, CardHeader, CardMedia } from 'material-ui/Card';
import Badge from 'material-ui/Badge';

import WorksList from '../works/list';

import { Link } from 'react-router-dom';

import List, {
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  ListSubheader,
} from 'material-ui/List';
import Switch from 'material-ui/Switch';
import Button from 'material-ui/Button';
import Paper from 'material-ui/Paper';
import Grid from 'material-ui/Grid';

import Avatar from '../../Avatar';
import CompaniesList from '../../fields/user/companies_list';
import ServicesList from '../../fields/user/services_list';

import CommunicationEmail from 'material-ui-icons/Email';
import CalendarIcon from 'material-ui-icons/Today';
import KeyIcon from 'material-ui-icons/VpnKey';
import FirmIcon from 'material-ui-icons/Store';
import AddIcon from 'material-ui-icons/AddCircleOutline';


// import Snackbar from '../../snackbar';

import Field from './fields/';
import Payment from './payment/';


import EditableView from "apollo-cms/lib/DataView/Object/Editable"


let moment = require('moment');

class ProfileView extends EditableView {


  // static contextTypes = {
  //   setPagetitle: PropTypes.func.isRequired,
  // };


  state = {}

  // constructor(props){
  //   super(props);

  //   if(props.document && props.document.document && props.document.document.data){
  //     let user_data = props.document.document.data;
  //     this.state = {
  //       allowEdit: props.allowEdit,
  //       inEditMode: props.inEditMode,
  //       id: user_data.id,
  //       username: user_data.username,
  //       fullname: user_data.fullname,
  //       email: user_data.email,
  //       photo: user_data.photo,
  //       regdate: user_data.regdate,

  //     }
  //   }

  //   let {

  //     user: currentUser 
  //   } = props;

  //   Object.assign(this.state, {
  //     currentUser: currentUser || {},
  //   });

  //   return;
  // }


  // componentDidMount(){

  //   this.setPagetitle();
  // }


  // setPagetitle(){


  //   let {
  //     setPagetitle,
  //   } = this.context;

  //   let {
  //     fullname,
  //     username,
  //   } = this.state; 

  //   setPagetitle && setPagetitle( fullname || username || "Профиль пользователя");
  // }


  // componentWillReceiveProps(nextProps){

  //   var newState;

  //   let {
  //     user,
  //   } = nextProps;

  //   // console.log('nextProps.user', user, nextProps);

  //   if(
  //     (user && user !== object)
  //     ||
  //     (!user && object)
  //   ){
  //     this.setState({
  //       currentUser: user && user.id > 0 && user || {},
  //     });
  //     return false;
  //   }


  //   if(newState){
  //     this.clearEditedData(newState);
  //   }

  //   return true;
  // }


  // onHandleEmail(email){
  //   window.location.href = 'mailto:'+ email;
  // }

  // editProfile(){
  //   this.setState({
  //     inEditMode: true,
  //   });
  // }


  // CancelEditProfile(){
  //   this.clearEditedData({
  //     inEditMode: false,
  //   });
  // }

  // clearEditedData(state){
  //   var newState = {}

  //   if(state){
  //     Object.assign(newState, state);
  //   }

  //   for(var i in this.state){
  //     if(/^new_/.test(i)){
  //       newState[i] = undefined;
  //     }
  //   }

  //   this.setState(newState);
  // }

  // onFieldChange(field, state){ 

  //   let newState = {};
  //   let newUserState = {};

  //   var value;

  //   switch(field){

  //     default: value = state.getCurrentContent().getFirstBlock().text;
  //   }

  //   newState["new_" + field] = value;
  //   newUserState[field] = value;

  //   // Обновляем текущего пользователя
  //   let{
  //     data: user,
  //   } = this.props.document.document;

  //   Object.assign(user, newUserState);

  //   this.updateState(newState);
  // }

  // updateState(newState){

  //   newState.isDirty = true;

  //   this.setState(newState);
  // }

  // shouldComponentUpdate(nextProps, nextState){

  // Save(){

  //   var body = new FormData();

  //   for(var i in this.state){
  //     if(/^new_/.test(i)){
  //       var value = this.state[i];

  //       if(typeof value == "undefined"){
  //         continue;
  //       }

  //       if(value == null){
  //         value = "";
  //       }

  //       body.append(i.replace(/^new_/, ''), value);
  //     }
  //   }

  //   let action = 'user/own_profile/update';

  //   var headers = new Headers();

  //   let CONNECTOR_URL = 'assets/components/modxsite/connectors/connector.php';

  //   fetch(CONNECTOR_URL +'?pub_action=' + action,{
  //     credentials: 'same-origin',
  //     headers: headers,
  //     method: "POST",
  //     body: body,
  //   })
  //     .then(function (response) {
  //       return response.json()
  //     })
  //     .then(function (data) {

  //       if(data.success){



  //         // Обновляем текущего пользователя
  //         let{
  //           data: user,
  //         } = this.props.document.document;



  //         var newState = {
  //           isDirty: false,
  //           inEditMode: false,
  //           ShowStatusMessage: true,
  //           StatusMessage: data.message || "Профиль успешно обновлен",
  //           StatusMessageDuration: 3000,
  //         };


  //         this.clearEditedData(newState);

  //         objectActions.GetOwnData();



  //       }
  //       else{

  //         var newState = {
  //           ShowStatusMessage: true,
  //           StatusMessage: data.message || "Ошибка выполнения запроса",
  //           StatusMessageDuration: 7000,
  //         };

  //         var errors = [];

  //         if(data.data){
  //           data.data.map(function(item){
  //             errors.push(item.msg);
  //           });

  //           newState.StatusMessage += "; " + errors.join(", ");
  //         }

  //         this.setState(newState);
  //       }
  //     }.bind(this))
  //     .catch(function (error) {
  //         console.log('Request failed', error);
  //       }
  //     );
  // }

  // handleActionTouchTap(a,b,c){ 
  //   this.setState({
  //     new_photo: null,
  //     ShowPhotoMessage: false,
  //   });
  // }

  // handleRequestClose(a,b,c){ 
  //   this.setState({
  //     ShowPhotoMessage: false,
  //   });
  // }

  onCheckNotice(notice_id, checked) {

    console.log("onCheckNotice");

    let {
      currentUser: user,
    } = this.state;

    let {
      notices,
    } = user || {}

    console.log('notices', notices, notice_id, checked);

    if (notices && notices.length) {

      this.setState((prevState) => {

        var notices = prevState.currentUser.notices;

        var new_notices = [];

        notices.map(function (item) {
          if (item.id === notice_id) {
            item.active = (checked === true ? "1" : "0");
          }

          if (item.active === "1") {
            new_notices.push(item.id);
          }
        });

        return {
          notices: notices,
          new_notices: new_notices,
        };
      }, () => {
        this.Save();
      });
    }

    return;
  }


  renderDefaultView() {

    const {
      classes,
    } = this.props;

    // return "UserPage";

    const {
      user: currentUser,
    } = this.context;;


    let {
      id: currentUser_id,
      notices: user_notices,
      sudo,
    } = currentUser || {};


    const object = this.getObjectWithMutations();
    const user = object;

    console.log('user', object);

    if (!object) {
      return null;
    }


    let {
      id: user_id,
      companies,
      services,
      works: works_response,
      username,
      fullname,
      email,
      photo,
      blocked,
      active,
      api_key,
    } = object || {};

    let {
      object: works,
      total: works_total,
    } = works_response || {}


    const inEditMode = this.isInEditMode();

    // console.log('Profile', user);

    // console.log('companies', companies, this.state, this.props);

    // console.log('Profile', user);
    // console.log('currentUser', currentUser);

    // console.log('user_notices', user_notices);

    var card, addition_info;

    var edit_buttons = [];

    let isCurrentUser = false;

    // if (currentUser && currentUser.id > 0 && currentUser.id == user.id) {

    //   isCurrentUser = true;

    //   if (inEditMode == true) {

    //     edit_buttons.push(<Button
    //       key="save"
    //       accent
    //       onTouchTap={this.Save.bind(this)}
    //     >Сохранить</Button>);
    //     edit_buttons.push(<Button
    //       key="cancel"
    //       onTouchTap={this.CancelEditProfile.bind(this)}
    //     >Отмена</Button>);
    //   }
    //   else {
    //     edit_buttons.push(<Button
    //       key="edit"
    //       accent
    //       onTouchTap={this.editProfile.bind(this)}
    //     >Редактировать</Button>);
    //   }

    // }



    var Photo;

    let photoStyle = {};



    Photo = <Avatar
      // type="extraBig"
      src={photo}
      username={fullname || username}
    />


    let fullname_field;


    var payment;

    if (isCurrentUser) {

      // var api_key = new_api_key || api_key;

      payment = <Payment user={object} />





      addition_info = <div>
        {payment}
      </div>

      var notices = [];

      if (user_notices && user_notices.length) {
        user_notices.map(function (item) {
          notices.push(<ListItem
            key={item.id}
          >
            <Switch className={classes.Switch}
              onClick={(event) => this.onCheckNotice(item.id, !(item.active === "1"))}
              checked={item.active === "1"}
            />

            <ListItemText primary={item.comment} />
          </ListItem>);
        }, this);
      }
    }


    if (inEditMode) {
      fullname_field = <Field
        // value={new_fullname || fullname}
        value={fullname || ""}
        name="fullname"
        onChange={this.onFieldChange.bind(this)}
        readOnly={!inEditMode}
        placeholder="Укажите ФИО"
      />
    }
    else {
      fullname_field = fullname;
    }

    card = <Grid
      container
    >
      <Grid
        item
        style={{
          width: 215,
        }}
      >

        {Photo}

      </Grid>

      <Grid
        item
        xs
      >

        <Grid
          container
          align="flex-start"
        >

          <Grid
            item
            xs={12}
            sm={6}
            lg={3}
          >
            <Typography
              type="title"
              style={{
                marginLeft: 31,
              }}
            >
              {fullname_field}
            </Typography>

            <ListItem

            >
              {edit_buttons}
            </ListItem>


          </Grid>



          {regdate
            ?
            <Grid
              item
              xs={12}
              sm={6}
              lg={3}
            >
              <Typography
                type="subheading"
                style={{
                  marginLeft: 17,
                }}
              >
                Зарегистрирован
                </Typography>

              <ListItem
              >
                <ListItemIcon>
                  <CalendarIcon />
                </ListItemIcon>
                {moment.unix(regdate).format("DD MMMM YYYY")}
              </ListItem>

              {email
                ?
                <div>
                  <Typography
                    type="subheading"
                    style={{
                      marginLeft: 17,
                      marginTop: 25,
                    }}
                  >
                    Емейл
                    </Typography>

                  <ListItem
                    button
                    onTouchTap={event => {
                      event.stopPropagation();
                      event.preventDefault();
                      this.onHandleEmail(email);
                    }}
                  >
                    <ListItemIcon
                    >
                      <CommunicationEmail />
                    </ListItemIcon>
                    {email}
                  </ListItem>
                </div>
                :
                null
              }




              {isCurrentUser
                ?
                <div>
                  <Typography
                    type="subheading"
                    style={{
                      marginLeft: 17,
                      marginTop: 25,
                    }}
                  >
                    Ключ для репозитория
                      </Typography>

                  <ListItem
                    button={inEditMode != true}
                    onTouchTap={inEditMode != true ? (event => this.editProfile(event)) : undefined}
                  >
                    <ListItemIcon>
                      <KeyIcon />
                    </ListItemIcon>


                    {inEditMode == true
                      ?
                      <Field
                        value={api_key}
                        name="api_key"
                        onChange={this.onFieldChange.bind(this)}
                        readOnly={!inEditMode}
                        placeholder="Укажите ключ самостоятельно"
                      />
                      :
                      api_key ? api_key : "Не указан"
                    }
                  </ListItem>
                </div>
                :
                null
              }



            </Grid>
            :
            null
          }


          <Grid
            item
            xs={12}
            sm={6}
            lg={3}
          >
            <Typography
              type="subheading"
              style={{
                marginLeft: 17,
              }}
            >
              {companies && companies.length ? `Состоит в командах` : `Не состоит в командах`}

            </Typography>

            {companies && companies.length
              ?
              <CompaniesList
                companies={companies}
                renderer={companies => {

                  return <List>
                    {companies.map(company => {
                      // console.log('renderer', company);

                      let {
                        id: company_id,
                        name: company_name,
                        uri: company_uri,
                      } = company;

                      return <Link
                        key={company_id}
                        to={company_uri}
                        href={company_uri}
                        className="underline-none"
                      >
                        <ListItem
                          button
                        >
                          <ListItemIcon>
                            <FirmIcon />
                          </ListItemIcon>
                          {company_name}
                        </ListItem>

                      </Link>
                    })}
                  </List>
                }}
              />
              :
              null
            }

            {isCurrentUser
              ?

              1 || !companies || !companies.length || sudo == "1"
                ?
                <Link
                  to={`/office/company/create/`}
                  href={`/office/company/create/`}
                  className="underline-none"
                >
                  <Button>
                    <AddIcon

                    /> Добавить команду
                    </Button>
                </Link>
                :
                null

              :
              null}



          </Grid>



          {services && services.length
            ?
            <Grid
              item
              xs={12}
              sm={6}
              lg={3}
            >
              <Typography
                type="subheading"
                style={{
                  marginLeft: 17,
                }}
              >
                Услуги в портфолио
                  </Typography>

              <ServicesList
                services={services}
                renderer={(services, getIcon, getUrl) => {


                  return <List>
                    {services.map(service => {
                      // console.log('renderer', company);


                      let {
                        id,
                        name,
                        count,
                      } = service;

                      let url = getUrl(user_id, id);

                      // console.log('getUrl', url);

                      return <Link
                        key={id}
                        to={url}
                        href={url}
                        className="underline-none"
                      >
                        <ListItem
                        // button
                        >
                          <ListItemIcon>
                            <Badge
                              badgeContent={count}
                              accent
                            >
                              {getIcon(service)}
                            </Badge>
                          </ListItemIcon>
                          {name}
                        </ListItem>

                      </Link>
                    })}
                  </List>
                }}
              />

            </Grid>
            :
            null
          }




          <Grid
            item
            xs={12}
            sm={6}
            lg={3}
          >

          </Grid>

          <Grid
            item
            xs={12}
            sm={6}
            lg={3}
          >

          </Grid>


        </Grid>
      </Grid>

      {isCurrentUser
        ?
        <Grid
          item
          xs={12}
        >

          <Grid
            container
          >

            <Grid
              item
              xs={12}
              md={6}
            >
              <Typography
                type="title"
                style={{
                  marginLeft: 30,
                }}
              >
                Настройки уведомлений
                  </Typography>

              <List>
                {notices}
              </List>

            </Grid>

            <Grid
              item
              xs={12}
              md={6}
            >
              {addition_info}
            </Grid>

          </Grid>

        </Grid>
        :
        null
      }

    </Grid>



    return (
      <Grid
        container
      >


        <Grid
          item
          xs={12}
        >

          {card}

        </Grid>

        <Grid
          item
          xs={12}
        >

          <Grid
            container
          >



          </Grid>

        </Grid>

        {works && works.length
          ?
          <Grid
            item
            xs={12}
          >

            <Typography
              type="title"
              style={{
                // marginLeft: 17,
                marginBottom: 5,
              }}
            >
              Портфолио
              </Typography>

            <WorksList
              works={works}
              page={0}
              limit={0}
              total={works.length}
            />


            {/*
                Если работ более 4, отправляем в полное портфолио
              */}

            {works_total > 4
              ?
              <Link
                to={`katalog-sajtov/?owner=${user.id}`}
                href={`katalog-sajtov/?owner=${user.id}`}
                className="underline-none"
              >
                <Button>
                  Смотреть все работы пользователя
                    </Button>
              </Link>
              :
              null
            }

          </Grid>
          :
          null
        }


      </Grid>
    );

    return null;
  }


  renderEditableView() {

    return this.renderDefaultView();

  }

}



export default ProfileView
