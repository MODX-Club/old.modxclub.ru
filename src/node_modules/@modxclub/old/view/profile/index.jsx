import React, {Component} from 'react';
import PropTypes from 'prop-types';

import { createStyleSheet } from 'jss-theme-reactor';

import Typography from 'material-ui/Typography';
import TextField from 'material-ui/TextField';
import Card, { CardActions, CardHeader, CardMedia } from 'material-ui/Card';
import Badge from 'material-ui/Badge';

import WorksList from '../works/list';

import {Link} from 'react-router-dom';

import List, {
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  ListSubheader,
} from 'material-ui/List';
import Switch from 'material-ui/Switch';
import Button from 'material-ui/Button';
import Paper from 'material-ui/Paper';
import Grid from 'material-ui/Grid';

import Avatar from '../../Avatar';
import CompaniesList from '../../fields/user/companies_list';
import ServicesList from '../../fields/user/services_list';

import CommunicationEmail from 'material-ui-icons/Email';
import CalendarIcon from 'material-ui-icons/Today';
import KeyIcon from 'material-ui-icons/VpnKey';
import FirmIcon from 'material-ui-icons/Store';
import AddIcon from 'material-ui-icons/AddCircleOutline';
 

// import Snackbar from '../../snackbar';

import Field from './fields/';
import Payment from './payment/';


const defaultProps = {
  inEditMode: false,
  isDirty: false,
  allowEdit: true,
};

const styleSheet = createStyleSheet('SwitchListSecondary', (theme) => ({
  root: {
  },
  Switch: {
    flex: 'none',
  },
}));

var classes;
 
let moment = require('moment');
moment.locale('ru');

class ProfileView extends Component {


  static contextTypes = {
    request: PropTypes.func.isRequired,
    setPagetitle: PropTypes.func.isRequired,
  };


  state = {}

  constructor(props){
    super(props);

    if(props.document && props.document.document && props.document.document.data){
      let user_data = props.document.document.data;
      this.state = {
        // initialized: user_data.id,
        // requested_id: props.document.document.user_id,
        allowEdit: props.allowEdit,
        inEditMode: props.inEditMode,
        id: user_data.id,
        username: user_data.username,
        fullname: user_data.fullname,
        email: user_data.email,
        photo: user_data.photo,
        regdate: user_data.regdate,
        // api_key: user_data.api_key,

      }
    }

    let {
      
      user: current_user 
    } = props;

    Object.assign(this.state, {
      current_user: current_user || {},
    });

    return;
  }
 

  componentDidMount(){

    this.setPagetitle();
  }
 

  setPagetitle(){
    
    
    let {
      setPagetitle,
    } = this.context;

    let {
      fullname,
      username,
    } = this.state; 

    setPagetitle( fullname || username || "Профиль пользователя");
  }


  // initialize(){
  //   var body = new FormData();

  //   body.append("id", this.state.requested_id);

  //   let action = 'users/getdata';

  //   var headers = new Headers();

  //   let CONNECTOR_URL = 'assets/components/modxsite/connectors/connector.php';

  //   fetch(CONNECTOR_URL +'?pub_action=' + action,{
  //     credentials: 'same-origin',
  //     headers: headers,
  //     method: "POST",
  //     body: body,
  //   })
  //     .then(function (response) {
  //       return response.json()
  //     })
  //     .then(function (data) {

  //       if(data.success && data.object){

  //         var newState = {
  //           initialized: true,
  //           id: data.object.id,
  //           username: data.object.username,
  //           fullname: data.object.fullname,
  //           email: data.object.email,
  //           photo: data.object.photo,
  //           regdate: data.object.regdate,
  //           api_key: data.object.api_key,
  //         };

  //         // if(data.object){
  //         //   for(var i in data.object){
  //         //     newState[i] = data.object[i];
  //         //   }
  //         // }

  //         // this.clearEditedData(newState);

  //         this.setState(newState);
  //       }
  //       else{

  //         var newState = {
  //           initialized: true,
  //           ShowStatusMessage: true,
  //           StatusMessage: data.message || "Ошибка выполнения запроса",
  //           StatusMessageDuration: 7000,
  //         };

  //         var errors = [];

  //         if(data.data){
  //           data.data.map(function(item){
  //             errors.push(item.msg);
  //           });

  //           newState.StatusMessage += "; " + errors.join(", ");
  //         }

  //         this.setState(newState);
  //       }
  //     }.bind(this))
  //     .catch(function (error) {
  //         console.log('Request failed', error);
  //       }
  //     );
  // }

  componentWillReceiveProps(nextProps){

    var newState;

    let {
      user,
    } = nextProps;

    // console.log('nextProps.user', user, nextProps);

    if(
      (user && user !== this.props.user)
      ||
      (!user && this.props.user)
    ){
      this.setState({
        current_user: user && user.id > 0 && user || {},
      });
      return false;
    }

    // if(nextProps.document.document.user_id && nextProps.document.document.user_id != this.state.requested_id){
    //   this.state.requested_id = nextProps.document.document.user_id;
    //   this.initialize();
    // }
    // else if(nextProps.document.document.data && nextProps.document.document.data.id != this.state.id){
    //   newState = nextProps.document.document.data;
    //   Object.assign(newState, {
    //     inEditMode: false,
    //     email: newState.email,
    //     api_key: newState.api_key,
    //     photo: newState.photo,
    //   });
    // }
    // else if(nextProps.user.id && nextProps.user.id != this.state.id){
    /*
    Если пользователь авторизовался, и это его карточка,
    то накладываем свойства
    * */
    // else if(
    //   nextProps.user.id
    //   && nextProps.user.id != this.props.user.id
    //   && nextProps.user.id == this.state.id
    // ){
    //   newState = {};
    //   Object.assign(newState, nextProps.user);
    // }

    if(newState){
      this.clearEditedData(newState);
    }

    return true;
  }

  // shouldComponentUpdate(nextProps, nextState){
  //
  //   return true;
  // }

  onHandleEmail(email){
    window.location.href = 'mailto:'+ email;
  }

  editProfile(){
    this.setState({
      inEditMode: true,
    });
  }


  CancelEditProfile(){
    this.clearEditedData({
      inEditMode: false,
    });
  }

  clearEditedData(state){
    var newState = {}

    if(state){
      Object.assign(newState, state);
    }

    for(var i in this.state){
      if(/^new_/.test(i)){
        newState[i] = undefined;
      }
    }

    this.setState(newState);
  }

  onFieldChange(field, state){ 

    let newState = {};
    let newUserState = {};

    var value;

    switch(field){
 
      default: value = state.getCurrentContent().getFirstBlock().text;
    }

    newState["new_" + field] = value;
    newUserState[field] = value;

    // Обновляем текущего пользователя
    let{
      data: user,
    } = this.props.document.document;

    Object.assign(user, newUserState);

    this.updateState(newState);
  }

  updateState(newState){

    newState.isDirty = true;

    this.setState(newState);
  }

  shouldComponentUpdate(nextProps, nextState){

    if(typeof window != "object"){
      return false;
    }

    return true;
  }

  Save(){

    var body = new FormData();

    for(var i in this.state){
      if(/^new_/.test(i)){
        var value = this.state[i];

        if(typeof value == "undefined"){
          continue;
        }

        if(value == null){
          value = "";
        }

        body.append(i.replace(/^new_/, ''), value);
      }
    }

    let action = 'user/own_profile/update';

    var headers = new Headers();

    let CONNECTOR_URL = 'assets/components/modxsite/connectors/connector.php';

    fetch(CONNECTOR_URL +'?pub_action=' + action,{
      credentials: 'same-origin',
      headers: headers,
      method: "POST",
      body: body,
    })
      .then(function (response) {
        return response.json()
      })
      .then(function (data) {

        if(data.success){



          // Обновляем текущего пользователя
          let{
            data: user,
          } = this.props.document.document;

          Object.assign(user, data.object);


          var newState = {
            isDirty: false,
            inEditMode: false,
            ShowStatusMessage: true,
            StatusMessage: data.message || "Профиль успешно обновлен",
            StatusMessageDuration: 3000,
          };

          if(data.object){
            for(var i in data.object){
              newState[i] = data.object[i];
            }
          }

          this.clearEditedData(newState);

          this.props.userActions.GetOwnData();



        }
        else{

          var newState = {
            ShowStatusMessage: true,
            StatusMessage: data.message || "Ошибка выполнения запроса",
            StatusMessageDuration: 7000,
          };

          var errors = [];

          if(data.data){
            data.data.map(function(item){
              errors.push(item.msg);
            });

            newState.StatusMessage += "; " + errors.join(", ");
          }

          this.setState(newState);
        }
      }.bind(this))
      .catch(function (error) {
          console.log('Request failed', error);
        }
      );
  }

  handleActionTouchTap(a,b,c){ 
    this.setState({
      new_photo: null,
      ShowPhotoMessage: false,
    });
  }

  handleRequestClose(a,b,c){ 
    this.setState({
      ShowPhotoMessage: false,
    });
  }

  onCheckNotice(notice_id, checked){
 

    let {
      current_user: user,
    } = this.state;

    let {
      notices,
    } = user || {}

    console.log('notices', notices, notice_id, checked);    

    if(notices && notices.length){

      this.setState((prevState) => {

        var notices = prevState.current_user.notices;

        var new_notices = [];

        notices.map(function(item){
          if(item.id === notice_id){ 
            item.active = (checked === true ? "1" : "0");
          }

          if(item.active === "1"){
            new_notices.push(item.id);
          }
        });

        return {
          notices: notices,
          new_notices: new_notices,
        };
      }, () => { 
        this.Save();
      });
    }

    return;
  }

  render(){
 

    let {
      current_user,
    } = this.state;

    let {
      id: current_user_id,
      notices: user_notices,
      sudo,
    } = current_user;


    let {
      data: user,
    // } = this.props || {};
    } = this.props.document.document || {};

    // console.log('user', user, this.props);

    let{
      id: user_id,
      companies,
      services,
      works: works_response,
      username,
      fullname,
      email,
      photo,
      blocked,
      active,
      api_key,
    } = user || {};

    let {
      object: works,
      total: works_total,
    } = works_response || {}

    // console.log('Profile', user);

    // console.log('companies', companies, this.state, this.props);

    // console.log('Profile', user);
    // console.log('current_user', current_user);

    // console.log('user_notices', user_notices);

    var card, addition_info;

    var edit_buttons = [];

    let isCurrentUser = false;

    if(current_user && current_user.id > 0 && current_user.id == user.id){

      isCurrentUser = true;

      if(this.state.inEditMode == true){

        edit_buttons.push(<Button
          key="save"
          accent
          onTouchTap={this.Save.bind(this)}
        >Сохранить</Button>);
        edit_buttons.push(<Button
          key="cancel"
          onTouchTap={this.CancelEditProfile.bind(this)}
        >Отмена</Button>);
      }
      else{
        edit_buttons.push(<Button
          key="edit"
          accent
          onTouchTap={this.editProfile.bind(this)}
        >Редактировать</Button>);
      }

    }


    if(this.state.id){

      var {loadingImage} = this.state;

      var Photo;

      let photoStyle = {};

      if(isCurrentUser){
        photoStyle = {
          cursor: 'pointer',
        }
      }

      Photo = <Avatar 
        type="extraBig" 
        avatar={this.state.new_photo || photo} 
        username={fullname || username} 
        onTouchTap={isCurrentUser ? (event => this.editProfile(event)) : undefined}
        style={photoStyle}
      />

      if(this.state.inEditMode){

        
      }

      let fullname_field;


      var payment;

      if(isCurrentUser){

        // var api_key = this.state.new_api_key || this.state.api_key;

        payment = <Payment user={this.props.user}/>

        



        addition_info = <div>
          {payment}
        </div>

        var notices = [];

        if(user_notices && user_notices.length){
          user_notices.map(function(item){
            notices.push(<ListItem
                key={item.id}
              >
                <Switch className={classes.Switch}
                  onClick={(event) => this.onCheckNotice(item.id, !(item.active === "1"))}
                  checked={item.active === "1"}
                />

                <ListItemText primary={item.comment}/>
              </ListItem>);
          }, this);
        } 
      }


      if(this.state.inEditMode){
        fullname_field = <Field
          // value={this.state.new_fullname || this.state.fullname}
          value={fullname || ""}
          name="fullname"
          onChange={this.onFieldChange.bind(this)}
          readOnly={!this.state.inEditMode}
          placeholder="Укажите ФИО"
        />
      }
      else{
        fullname_field = fullname;
      }

      card = <Grid
        container
      >
        <Grid 
          item
          style={{
            width: 215,
          }}
        >

          {Photo}

        </Grid>

        <Grid
          item
          xs
        >

          <Grid
            container
            align="flex-start"
          >
            
            <Grid 
              item
              xs={12}
              sm={6}
              lg={3}
            >
              <Typography 
                type="title"
                style={{
                  marginLeft: 31,
                }}
              >
                {fullname_field}
              </Typography>

              <ListItem
                
              >
                {edit_buttons}
              </ListItem> 
 

            </Grid>



            {this.state.regdate
              ?
              <Grid 
                item
                xs={12}
                sm={6}
                lg={3}
              > 
                <Typography 
                  type="subheading"
                  style={{
                    marginLeft: 17,
                  }}
                >
                  Зарегистрирован
                </Typography>

                <ListItem
                >
                  <ListItemIcon>
                    <CalendarIcon />
                  </ListItemIcon>
                  {moment.unix(this.state.regdate).format("DD MMMM YYYY")}
                </ListItem> 

                {this.state.email
                  ?
                  <div>
                    <Typography 
                      type="subheading"
                      style={{
                        marginLeft: 17,
                        marginTop: 25,
                      }}
                    >
                      Емейл
                    </Typography>

                    <ListItem
                      button
                      onTouchTap={event => {
                        event.stopPropagation();
                        event.preventDefault();
                        this.onHandleEmail(this.state.email);
                      }}
                    >
                      <ListItemIcon
                      >
                        <CommunicationEmail />
                      </ListItemIcon>
                      {this.state.email}
                    </ListItem> 
                  </div>
                  :
                  null
                }


                

                {isCurrentUser 
                  ? 
                    <div>
                      <Typography 
                        type="subheading"
                        style={{
                          marginLeft: 17,
                          marginTop: 25,
                        }}
                      >
                        Ключ для репозитория
                      </Typography>
                      
                      <ListItem
                        button={this.state.inEditMode != true}
                        onTouchTap={this.state.inEditMode != true ? (event => this.editProfile(event)) : undefined}
                      >
                        <ListItemIcon>
                          <KeyIcon />
                        </ListItemIcon>
                        
                        
                        {this.state.inEditMode == true
                          ?
                          <Field
                            value={api_key}
                            name="api_key"
                            onChange={this.onFieldChange.bind(this)}
                            readOnly={!this.state.inEditMode}
                            placeholder="Укажите ключ самостоятельно"
                          />
                          :
                          api_key ? api_key : "Не указан"
                        }
                      </ListItem> 
                    </div>
                  :
                  null
                }



              </Grid>
              :
              null
            }


            <Grid
              item
              xs={12}
              sm={6}
              lg={3}
            >
              <Typography
                type="subheading"
                style={{
                  marginLeft: 17,
                }}
              >
                {companies && companies.length ? `Состоит в командах` : `Не состоит в командах`}
                  
              </Typography>

              {companies && companies.length
                ?
                <CompaniesList 
                  companies={companies}
                  renderer={companies => {

                    return <List>
                      {companies.map(company => {
                        // console.log('renderer', company);

                        let{
                          id: company_id,
                          name: company_name,
                          uri: company_uri,
                        } = company;

                        return <Link
                          key={company_id}
                          to={company_uri}
                          href={company_uri}
                          className="underline-none"
                        >
                          <ListItem 
                            button
                          > 
                            <ListItemIcon>
                              <FirmIcon />
                            </ListItemIcon>
                            {company_name}
                          </ListItem>
                          
                        </Link>
                      })}
                    </List>
                  }}
                />
                :
                null
              } 

              {isCurrentUser
                ?

                1 || !companies || !companies.length || sudo == "1"
                  ?
                  <Link
                    to={`/office/company/create/`}
                    href={`/office/company/create/`}
                    className="underline-none"
                  >
                    <Button>
                      <AddIcon 
                      
                      /> Добавить команду  
                    </Button>
                  </Link>
                  :
                  null
                
                :
                null}



            </Grid>

            

            {services && services.length
              ?
                <Grid
                  item
                  xs={12}
                  sm={6}
                  lg={3}
                >
                  <Typography
                    type="subheading"
                    style={{
                      marginLeft: 17,
                    }}
                  >
                    Услуги в портфолио
                  </Typography>

                  <ServicesList 
                    services={services}
                    renderer={(services, getIcon, getUrl) => {


                      return <List>
                        {services.map(service => {
                          // console.log('renderer', company);


                          let{
                            id,
                            name,
                            count,
                          } = service;

                          let url = getUrl(user_id, id);

                          // console.log('getUrl', url);

                          return <Link
                            key={id}
                            to={url}
                            href={url}
                            className="underline-none"
                          >
                            <ListItem 
                              // button
                            > 
                              <ListItemIcon>
                                <Badge
                                  badgeContent={count}
                                  accent
                                >
                                  {getIcon(service)}
                                </Badge>
                              </ListItemIcon>
                              {name}
                            </ListItem>
                            
                          </Link>
                        })}
                      </List>
                    }}
                  />
                  
                </Grid>
              :
              null
            }

            
            

            <Grid 
              item
              xs={12}
              sm={6}
              lg={3}
            >
              
            </Grid>

            <Grid 
              item
              xs={12}
              sm={6}
              lg={3}
            >
              
            </Grid>
            

          </Grid>
        </Grid>
        
        {isCurrentUser
          ?
            <Grid
              item
              xs={12}
            >

              <Grid
                container
              >

                <Grid 
                  item 
                  xs={12}
                  md={6}
                >
                  <Typography 
                    type="title" 
                    style={{
                      marginLeft: 30,
                    }}
                  >
                    Настройки уведомлений
                  </Typography>

                  <List>
                    {notices}
                  </List>

                </Grid>

                <Grid
                  item
                  xs={12}
                  md={6}
                >
                  {addition_info}
                </Grid>
                
              </Grid>
              
            </Grid>
          :
          null
        }

      </Grid>

    }
    else{
      card = <h3>Пользователь не найден</h3>;
    }

    return (
      <Grid
        container
      >


        <Grid
          item
          xs={12}
        >
        
          {card}

        </Grid> 

        <Grid
          item
          xs={12}
        >
        
          <Grid
            container
          >
          
            

          </Grid> 

        </Grid> 

        {works && works.length
          ?
            <Grid
              item
              xs={12}
            >

              <Typography 
                type="title"
                style={{
                  // marginLeft: 17,
                  marginBottom: 5,
                }}
              >
                Портфолио
              </Typography>
              
              <WorksList
                works={works}
                page={0}
                limit={0}
                total={works.length}
              />


              {/*
                Если работ более 4, отправляем в полное портфолио
              */}

              {works_total > 4 
                ?
                  <Link
                    to={`katalog-sajtov/?owner=${user.id}`}
                    href={`katalog-sajtov/?owner=${user.id}`}
                    className="underline-none"
                  >
                    <Button>
                      Смотреть все работы пользователя
                    </Button>
                  </Link>
                :
                null
              }

            </Grid>
          :
          null
        }

 
      </Grid>
    );

    return null;
  }


}
 

ProfileView.defaultProps = defaultProps;

export default ProfileView
