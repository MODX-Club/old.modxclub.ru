import React, {Component} from 'react';

import PropTypes from 'prop-types';

import Grid from 'material-ui/Grid';
import Typography from 'material-ui/Typography';
import TextField from 'material-ui/TextField';
import Button from 'material-ui/Button';

export default class Company extends Component{

	static defaultProps = {};

	static propTypes = {
		item: PropTypes.object,
		companiesStore: PropTypes.object.isRequired,
	};

	static contextTypes = {
		// saveItem: PropTypes.func.isRequired,
		createCompany: PropTypes.func.isRequired,
		saveCompany: PropTypes.func.isRequired,
	};
	
	constructor(props){

		super(props);

		this.state = {
			item: props.item,
		}

		return;
	}

	componentWillMount(){

		let {
			companiesStore,
		} = this.props;

		this.storeListener = companiesStore.getDispatcher().register(payload => {

			switch(payload.type){

				case companiesStore.actions['CREATE']:

					if(!this.state.item){						
						this.setState({
							item: payload.object,
						});
					}

					break;
			}

			this.forceUpdate();
		});

		return;
	}

	componentWillUnmount(){

		let {
			companiesStore,
		} = this.props;

		this.storeListener && companiesStore.getDispatcher().unregister(this.storeListener);

	}


	componentDidMount(){

		let {
			item,
			companiesStore,
		} = this.props;

		let {
			createCompany,
		} = this.context;

		if(!item){
			// item = {};

			// companiesStore.getDispatcher().dispatch(companiesStore.actions['CREATE'], item);

			createCompany();
		}
	}

	 //  componentDidUpdate(){

	 //    if(this.props.debug){
	 //      console.log("MyComponent componentDidUpdate", this);
	 //    }
	 //  }

 // 	componentWillReceiveProps(nextProps){

 // 		console.log("Company componentWillReceiveProps", nextProps);

	// }


 	onChange = (event) => {

 		let {
 			name,
 			value,
 		} = event.target;

		let {
			companiesStore,
		} = this.props;

		let {
			item,
		} = this.state;

		if(!item){
			console.error("Не указан объект");
			return false;
		}


 		let newState = {};

 		newState[name] = value;

		// newState._isDirty = newState._isDirty || {};

		// Object.assign(newState._isDirty , newState);

		let _isDirty = {};

		item._isDirty && Object.assign(_isDirty, item._isDirty);

		Object.assign(_isDirty, newState);

		newState._isDirty = _isDirty;

 		companiesStore.getDispatcher().dispatch(companiesStore.actions['UPDATE'], item, newState);

 		return;
 	}


 	save(event){
 	// 	let {
 	// 		saveItem,
 	// 	} = this.context;

		// let {
		// 	companiesStore,
		// } = this.props;

 		let {
 			item,
 		} = this.state;

 	// 	saveItem("companies/", companiesStore, item);

	 	let {
	 		saveCompany,
	 	} = this.context;

	 	return saveCompany(item);
 	}


 	renderField(Class, props){

 		let {
 			name,
 			helperText,
 			...other
 		} = props;

		let {
			item,
		} = this.state;

		if(!item){
			console.error("Не был получен объект");
			return;
		}

		let {
			_errors,
		} = item;

		let value = item[name] || "";

		let error = _errors && _errors[name] || false;

		// console.log("errors", name, error, _errors && _errors[name], _errors, item);

 		return <Class 
			onChange={this.onChange}
			name={name}
			value={value}
			error={error ? true : false}
			helperText={error || helperText || undefined}
			onFocus={event => {
 
				if(_errors && _errors[name]){ 
					_errors[name] = null;
					this.forceUpdate();
				}
			}}
 			{...other}
 		/>
 	}

	render(){

		let {
			item,
		} = this.state;

		if(!item){

			return null;
		}

		let {
			id,
			name,
			pagetitle,
			website,
			// email,
			phone,
			_errors,
			_isDirty,
		} = item;

		// console.log('Company render item', item);

		// console.log('Company render Ошибки', _errors);
		// console.log('Company render Ошибка', _errors && _errors['name']);

		return <Grid
			container
		>
			<Grid
				item
				xs={12}
				sm={6}
				lg={4}
			>

				{this.renderField(TextField, {
					label: "Название команды",
					helperText: "Как будет называться ваша команда?",
					name: "name",
				})} 

				{this.renderField(TextField, {
					label: "Веб-сайт",
					helperText: "Если https://, укажите вместе с протоколом",
					name: "website",
				})} 

				{this.renderField(TextField, {
					label: "Телефон",
					helperText: "Не обязательно. Если указываете, то вместе с кодом страны",
					name: "phone",
				})} 

				{this.renderField(TextField, {
					label: "Адрес",
					helperText: "Не обязательно.",
					name: "address",
				})} 

				<Button
					raised
					disabled={!_isDirty ? true : false}
					onClick={event => {
						this.save();
					}}
				>
					Сохранить
				</Button>

			</Grid>
			
		</Grid>
	}
}
 
