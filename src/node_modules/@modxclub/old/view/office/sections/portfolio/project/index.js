import React, {Component} from 'react';

import PropTypes from 'prop-types';

import Grid from 'material-ui/Grid';
import Typography from 'material-ui/Typography';
import TextField from 'material-ui/TextField';
import Button from 'material-ui/Button';

import Work from '../../../../works/work';

export default class Project extends Component{

	static defaultProps = {};

	static propTypes = {
		item: PropTypes.object,
		projectsStore: PropTypes.object.isRequired,
	};

	static contextTypes = {
		saveItem: PropTypes.func.isRequired,
		createProject: PropTypes.func.isRequired,
	};
	
	constructor(props){

		super(props);

		this.state = {
			item: props.item,
		}

		return;
	}

	componentWillMount(){

		let {
			projectsStore,
		} = this.props;

		this.storeListener = projectsStore.getDispatcher().register(payload => {

			switch(payload.type){

				case projectsStore.actions['CREATE']:

					if(!this.state.item){						
						this.setState({
							item: payload.object,
						});
					}

					break;
			}

			this.forceUpdate();
		});

		return;
	}

	componentWillUnmount(){

		let {
			projectsStore,
		} = this.props;

		this.storeListener && projectsStore.getDispatcher().unregister(this.storeListener);

	}


	componentDidMount(){

		let {
			item,
			companiesStore,
		} = this.props;

		let {
			createProject,
		} = this.context;

		if(!item){
			// item = {};

			// companiesStore.getDispatcher().dispatch(companiesStore.actions['CREATE'], item);
			console.log('createProject');
			createProject();
		}
	}

 	onChange = (event) => {

 		let {
 			name,
 			value,
 		} = event.target;

		let {
			projectsStore,
		} = this.props;

		let {
			item,
		} = this.state;

		if(!item){
			console.error("Не указан объект");
			return false;
		}


 		let newState = {};

 		newState[name] = value;

		// newState._isDirty = newState._isDirty || {};

		// Object.assign(newState._isDirty , newState);

		let _isDirty = {};

		item._isDirty && Object.assign(_isDirty, item._isDirty);

		Object.assign(_isDirty, newState);

		newState._isDirty = _isDirty;

 		projectsStore.getDispatcher().dispatch(projectsStore.actions['UPDATE'], item, newState);

 		return;
 	}


 	save(event){ 
 		let {
 			item,
 		} = this.state;

 	// 	saveItem("companies/", companiesStore, item);

	 	let {
	 		saveProject,
	 	} = this.context;

	 	return saveCompany(item);
 	}


 	renderField(Class, props){

 		let {
 			name,
 			helperText,
 			...other
 		} = props;

		let {
			item,
		} = this.state;

		if(!item){
			console.error("Не был получен объект");
			return;
		}

		let {
			_errors,
		} = item;

		let value = item[name] || "";

		let error = _errors && _errors[name] || false;

		// console.log("errors", name, error, _errors && _errors[name], _errors, item);

 		return <Class 
			onChange={this.onChange}
			name={name}
			value={value}
			error={error ? true : false}
			helperText={error || helperText || undefined}
			onFocus={event => {
 
				if(_errors && _errors[name]){ 
					_errors[name] = null;
					this.forceUpdate();
				}
			}}
 			{...other}
 		/>
 	}

	render(){

		let {
			user,
		} = this.props;

		let {
			item,
		} = this.state;

		if(!item){

			return null;
		}

		let {
			id,
			_errors,
			_isDirty,
			members,
		} = item;

		// console.log('Company render item', item);

		// console.log('Company render Ошибки', _errors);
		// console.log('Company render Ошибка', _errors && _errors['name']);

		return <Grid
			container
		> 

			<Work
        item={item}
        user={user}
        inEditMode={true}
        fullwidth={true}
        editMembers={!parseInt(id) ? true : false}
      />
			
		</Grid>
	}
}
 
