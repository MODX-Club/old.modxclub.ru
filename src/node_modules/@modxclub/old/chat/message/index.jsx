import React, { Component } from 'react';

import Avatar from '../../Avatar';
import TextEditor from '../../editor/';

import Button from 'material-ui/Button';

import {Link} from 'react-router-dom';

let moment = require('moment');
moment.locale('ru');

let chatWrapperStyle = {
  overflow: 'auto',
  backgroundColor: '#ffffff',
}
let chatItemDescStyle = {
  padding: '6px',
  margin: '0 6px',
  width: '100%'
}
let chatItemWrapperStyle = {
  display: 'flex',
  padding: '6px 12px',

}
let chatWrapperReverseStyle = Object.assign({},chatItemWrapperStyle,{
  display: 'flex',
  padding: '6px 12px',
})
let chatItemAvatarStyle = {
  width: 40,
  marginTop: 8,
  textDecoration: 'none',
}
let chatItemTitleHead = {
  display: 'flex',
  justifyContent: 'space-between'
}
let chatItemTitleStyle = {
  margin: '0 0 5px',
  fontSize: '14px',
  color: '#757575',
}
let chatItemDateStyle = {
  fontStyle: 'italic',
  color: '#666',
  float: 'right',
  fontSize: '12px',
}
let chatInputWrapperStyle = {
  display: 'flex',
  alignItems: 'flex-end',
  flex: '1 0 auto',
  maxHeight: '100%',
  overflow: 'auto',
}
let chatInputStyle = { height: 40, width: 'calc(100% - 60px)' }
let chatBtnStyle = {
  position: 'absolute',
  bottom: 0,
  right: 0,
}

const defaultProps = {
  level: 1,
}

export default class ChatMessage extends Component {

  constructor(props){
    super(props);

    this.state = {
      text: props.item.text || {},
      level: props.level,
    }
  }

  componentWillReceiveProps(nextProps){
    // console.log("Message receive props", nextProps);

    if(nextProps.item.text != this.state.text){
      this.setState({
        text: nextProps.item.text,
      });
    }

    return true;
  }

  // showUserProfile(username){
  //   this.props.documentActions.LoadDocument("profile/" + username);
  // }

  render(){

    let item = this.props.item;
    let username = item.author_username || item.username;
    let fullname = item.author_fullname || item.fullname || item.author_username || item.username || "Аноним";
    let allow = (item.createdby == this.props.user.id) || (this.props.user.id == 2);

    var text;
    try{
      text = JSON.parse(this.state.text);
    }
    catch(e){
      // console.error(e);
      // return null;
      text = this.state.text;
    }

    // text = {"entityMap":{},"blocks":[{"key":"bqqvr","text": String(Math.random()),"type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}]};

    // console.log('ChatMessage', this.state);

    var children = [];

    if(item.children && item.children.length){
      item.children.map(function(child){
        children.push(<ChatMessage
          key={child.key || child.ts || child.id} item={child}
          user={this.props.user}
          documentActions={this.props.documentActions}
          // document={this.props.document}
          level={this.state.level + 1}
        />);
      }, this);
    }


    var className = "chat-item__outer";

    if(this.state.level > 1 && this.state.level < 5){
      className += " child-margined";
    }


    return (
      <div className={className}>
        <div style={allow ? chatWrapperReverseStyle : chatItemWrapperStyle} className="chat-item__wrapper">
          <Link 
            to={`/profile/${username}`}
            href={`/profile/${username}`}
            style={chatItemAvatarStyle}
          >
            <Avatar
              avatar={item.photo || item.author_avatar}
              username={fullname}
            />
          </Link>
          <div style={chatItemDescStyle}>
            <div style={chatItemTitleHead}>
              <Link 
                to={`/profile/${username}`}
                href={`/profile/${username}`}
                style={{
                  textDecoration: 'none',
                  marginTop: 10,
                }}
              >
                <h4 style={chatItemTitleStyle}>{fullname}</h4>
              </Link>
              <div style={chatItemDateStyle}>
                {item.createdon ? item.createdon : moment.unix(item.ts / 1000).format("HH:mm")}
              </div>
            </div>
            {/*<div dangerouslySetInnerHTML={{__html: item.text}} className="chat-message"/>*/}

            <TextEditor className="chat-message" id={item.id} content={text} allow_edit={allow} onBeforeSendMessage={this.props.onBeforeSendMessage}/>

          </div>
        </div>

        {children}

      </div>
    );
  }
}

ChatMessage.defaultProps = defaultProps;
