 

import PropTypes from 'prop-types';

import IndexView from './index/';
import MainpageView from './mainpage/';
import BlogsView from './blogs/';
import TopicsView from './topics/';
import TopicView from './topics/topic/';
import TopicsTagView from './topics/tag';
import CreateTopicView from './topics/topic/create';
import CommentsView from './comments/';
import CommentView from './comment/';
import ProfilesView from './profiles/';
import ProfileView from './profile/';
import RegisterView from './profile/register';
import ContactsView from './contacts/';
import ServiceView from './services/service/';
import StoreView from './store/';
import WorksView from './works/';
import WorkView from './work/';
import CompaniesView from './companies/';
import CompanyView from './companies/company/';
import ChatView from './chat/';
import OfficeView from './office/';

import React, {Component} from 'react';

// module.exports = {
//   Index: IndexView,
// };


let views = {
  Index: IndexView,
  Mainpage: MainpageView,
  Blogs: BlogsView,
  Topics: TopicsView,
  Topic: TopicView,
  TopicsTag: TopicsTagView,
  CreateTopic: CreateTopicView,
  Comments: CommentsView,
  Comment: CommentView,
  Profiles: ProfilesView,
  Profile: ProfileView,
  Register: RegisterView,
  Contacts: ContactsView,
  Service: ServiceView,
  Store: StoreView,
  Works: WorksView,
  Work: WorkView,
  Companies: CompaniesView,
  Company: CompanyView,
  Chat: ChatView,
  Office: OfficeView,
};

// отреагируем на кнопки истории
// window.onpopstate = function(event) {
//     if(event.state && event.state.id) {
//       // замена state
//     }
// };

class View extends Component{

  static contextTypes = {
    router: PropTypes.object.isRequired, 
    classes: PropTypes.object.isRequired, 
  };

  constructor(props){

    super(props);

    this.state = {
      "prev_viewd": "",
    };
    
  } 

  componentWillReceiveProps(nextProps){


    if(nextProps.document.document.id != this.props.document.document.id){
 
      this.props.documentActions.SwitchView(nextProps.document.document.view);
    }

    return true;
  }



  componentDidUpdate(prevProps, prevState){

    /*
    * Если документ изменился, скроллим вверх
    * */
    if(prevProps.document.document.id != this.props.document.document.id){
      if(typeof window !== "undefined"){
        let wrapper = window.document.querySelector('body');
        if(typeof wrapper !== "undefined" && wrapper){
          wrapper.scrollTop = 0;
        }
      }
    }

    return;
  }

  render(){

    let {
      router,
      classes,
    } = this.context;

    var ActiveView = views[this.props.document.document_view];

    if(typeof ActiveView == "undefined"){
      return (<h3 style={{
        color: 'red'
      }}>Представление не было найдено</h3>);
    }

    return <ActiveView
      document={this.props.document}
      proxy={this.props.proxy}
      user={this.props.user}
      proxyActions={this.props.proxyActions}
      documentActions={this.props.documentActions}
      userActions={this.props.userActions}
      router={router}
      classes={classes}
    />;
  }
}

 

export default View
