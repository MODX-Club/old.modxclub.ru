import React, {Component} from 'react'; 

import { createStyleSheet } from 'jss-theme-reactor';

import Button from 'material-ui/Button';
import TextField from 'material-ui/TextField';
import Typography from 'material-ui/Typography';
import Menu, {MenuItem} from 'material-ui/Menu';
import Tabs, { Tab } from 'material-ui/Tabs';
import Card, {
  CardContent,
  CardActions,
} from 'material-ui/Card';
import "./styles/styles.less";

// import Step, {
//   Stepper,
//   StepLabel,
// } from '../../../Stepper';
import ArrowForwardIcon from 'material-ui-icons/ArrowForward';
import CreditCard from 'material-ui-icons/CreditCard';
import Done from 'material-ui-icons/Done';
import DoneAll from 'material-ui-icons/DoneAll';
import AccountBalanceWallet from 'material-ui-icons/AccountBalanceWallet';

const styleSheet = createStyleSheet('Payment', (theme) => ({
  root: {
  },
  Card: {
    // padding: 10,
    marginTop: 8,
  },
  Tabs: {
    marginBottom: 20,
  },
}));


const defaultProps = {
  stepIndex: 0,
  paymentType: "PC",
  paymentTypeTitle: "Яндекс.Деньги (яндекс кошелек)",
  cps_phone: "",
  cps_email: "",
  sum: 1000,
  coins: 0,
  paymentGoal: 4,   // Пополнение счета
}

var classes;

class Payment extends Component{

  constructor(props){

    super(props);

    this.handleNext = this.handleNext.bind(this);
    this.handlePrev = this.handlePrev.bind(this);

    this.state = {
      user_id: props.user.id,
      cps_email: props.user.email || props.cps_email,
      stepIndex: props.payment_success === true ? 2 : props.stepIndex,
      paymentType: props.paymentType,
      paymentTypeTitle: props.paymentTypeTitle,
      sum: props.sum,
      coins: props.coins,
      cps_phone: props.cps_phone,
      paymentGoal: props.paymentGoal,
      payment_success: props.payment_success,
      paymentTypeSelectorOpen: false,
      paymentTypeAnchorEl: null,
    };
  }

  componentDidMount(){
    this.updateValues({
      sum: this.state.sum,
      coins: this.state.sum,
    });
  }
 

  updateValues(newState){

    newState.coins = newState.coins ? Math.ceil(newState.coins) : 0;

    this.setState(newState);
  }

  componentWillReceiveProps(nextProps){

    var newState = {

    };

    if(nextProps.user.id != this.state.user_id){
      newState.user_id = nextProps.user.id;
    }

    if(nextProps.user.email != this.state.cps_email){
      newState.cps_email = nextProps.user.email;
    }

    this.setState(newState);

    return true;
  }

  onSumChanged(e){

    var value = e.target.value;

    this.updateValues({
      sum: value,
      coins: this.state.paymentGoal==3 ? Math.ceil(value / 2) : value,
    });

    return true;
  }

  onCoinsChanged(e){

    var value = e.target.value;

    this.updateValues({
      sum: this.state.paymentGoal==3 ? value * 2 : value,
      coins: value,
    });

    return true;
  }

  onPhoneChanged(e){

    this.setState({
      cps_phone: e.target.value,
    });

    return true;
  }

  onEmailChanged(e){

    this.setState({
      cps_email: e.target.value,
    });

    return true;
  }

  selectPaymentTypeHandler(event){

    var value = event.target.attributes && event.target.attributes.value && event.target.attributes.value.value ? event.target.attributes.value.value : "";

    var newState = {
      paymentType: value,
      paymentTypeTitle: event.target.innerText,
    };

    console.log('selectPaymentTypeHandler', newState );

    this.setState(newState);

    this.onPaymentTypeMenuClose();
  }


  onPaymentTypeMenuClose(){
    this.setState({
      paymentTypeSelectorOpen: false,
    })
  }

  handlepaymentGoalChange(event, index, value){

    var newState = {
      paymentGoal: value,
    };

    // Пополнение счета
    if(value == 4){
      newState.coins = newState.sum = defaultProps.sum;
    }
    // Подписка
    else{
      newState.sum = 5000;
      newState.coins = 2500;
    }

    this.setState(newState);
  }

  getStepContent(stepIndex) {

    // console.log("state", this.state);

    switch (stepIndex) {
      case 0:
        return (
            <div className="label">
 

              <TextField
                key="sum"
                name="sum"
                label="Оплачиваемая сумма в рублях"
                value={String(this.state.sum) || ''}
                type="number"
                disabled={this.state.paymentGoal == 3}
                onChange={this.onSumChanged.bind(this)}
              />

              <TextField
                key="coins"
                name="coins"
                label="Количество монет на счет"
                value={String(this.state.coins) || ''}
                type="number"
                onChange={this.onCoinsChanged.bind(this)}
              />
            </div>
        );

      case 1:

        var content;

        if(this.state.sum > 0){
          content = <div>
            <p>
              Сумма к оплате {this.state.sum} руб.
            </p>

            <TextField
              key="phone"
              label="Телефон"
              value={this.state.cps_phone}
              onChange={this.onPhoneChanged.bind(this)}
            />

            <TextField
              key="email"
              label="Емейл (На него придет квитанция)"
              value={this.state.cps_email}
              onChange={this.onEmailChanged.bind(this)}
            />


            <TextField
              key="paytype"
              aria-owns="paymentType-selector"
              aria-haspopup="true"
              label="Способ оплаты"
              name="paymentType"
              value={this.state.paymentTypeTitle}
              // onChange={this.handlepaymentTypeChange.bind(this)}
              onTouchTap={(event) => {
                this.setState({
                  paymentTypeSelectorOpen: true,
                  paymentTypeAnchorEl: event.currentTarget,
                })
              }}
            />


            <Menu
              id="paymentType-selector"
              anchorEl={this.state.paymentTypeAnchorEl}
              open={this.state.paymentTypeSelectorOpen}
              onRequestClose={() => {this.onPaymentTypeMenuClose()}}
            >
              <MenuItem value="PC" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>Яндекс.Деньги (яндекс кошелек)</MenuItem>
              <MenuItem value="AC" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>Банковская карта</MenuItem>
              <MenuItem value="SB" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>Сбербанк (Онлайн или по СМС)</MenuItem>
              <MenuItem value="QW" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>QIWI Wallet</MenuItem>
              <MenuItem value="AB" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>Альфа-банк (Альфа-Клик)</MenuItem>
              <MenuItem value="PB" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>Промсвязьбанк</MenuItem>
              <MenuItem value="MA" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>MasterPass</MenuItem>
              <MenuItem value="GP" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>Наличными через кассы и терминалы</MenuItem>
              <MenuItem value="WM" onTouchTap={(event) => {this.selectPaymentTypeHandler(event)}}>WebMoney</MenuItem>
            </Menu>

            <p>
              Нажав "Оплатить", вы будете направлены на платежный сервис Яндекс.Деньги для совершения платежа.
            </p>
          </div>;
        }
        else{
          content = <h4>Сумма должна быть положительной. Вернитесь и скорректируйте сумму.</h4>
        }

        return (
          content
        );

      case 2:
        return (
          this.state.payment_success === true
            ?
            <p>Оплата прошла успешно</p>
            :
            <p>Что-то пошло не так</p>
        );
    }
  }

  handleNext() {
    const {stepIndex} = this.state;

    if (stepIndex < 2) {
      this.setState({stepIndex: stepIndex + 1});
    }
  }

  handlePrev() {
    const {stepIndex} = this.state;

    if (stepIndex > 0) {
      this.setState({stepIndex: stepIndex - 1});
    }
  }

  handleTabChange = (event, index) => {

    console.log('handleTabChange', event, index);

    this.setState({
      stepIndex: index,
    });
  }

  render() {
    const {stepIndex} = this.state;

    var nextButton, nextButtonLabel, nextDisabled = false;

    if(stepIndex === 1) {
      nextDisabled = !(this.state.sum > 0);
      nextButtonLabel = 'Оплатить';
    }
    else if(stepIndex === 2){
      nextButtonLabel = 'Завершить';
    }
    else{
      nextButtonLabel = 'Далее';
    }

    if(stepIndex === 1){
      nextButton = <form
        key="next"
        className="payment"
        method="POST"
        action="https://money.yandex.ru/eshop.xml"
      >
        <TextField
          type="hidden"
          name="sum"
          value={this.state.sum}
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="paymentType"
          value={this.state.paymentType}
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="shopId"
          value="49203"
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="scid"
          value="33531"
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="CustomerNumber"
          value={this.state.user_id}
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="cps_phone"
          value={this.state.cps_phone}
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="cps_email"
          value={this.state.cps_email}
          style={{
            display: 'none',
          }}
        />
        <TextField
          type="hidden"
          name="order_type"
          value={this.state.paymentGoal}
          style={{
            display: 'none',
          }}
        />
        <Button
          disabled={nextDisabled}
          type="submit"
        >{nextButtonLabel}</Button>
      </form>
    }
    else{
      nextButton = <Button
         key="next"
         disabled={nextDisabled}
         onTouchTap={this.handleNext}
      >{nextButtonLabel}</Button>;
    }

    var prevButton = <Button
      key="prev"
      disabled={stepIndex === 0}
      onTouchTap={this.handlePrev}
      style={{marginRight: 12}}
    >Назад</Button>;

    var buttons = [];

    if(this.state.stepIndex < 2){
      buttons.push(prevButton);
      buttons.push(nextButton);
    }


    return (
      <div
        className={classes.root}
      >
        <Typography 
          type="title" 
          style={{
            marginBottom: 30,
          }}
        >
          Пополнение баланса
        </Typography>

        <Card
          className={classes.Card}
        >
          <CardContent>

            <Tabs
              className={classes.Tabs}
              index={stepIndex || 0}
              onChange={this.handleTabChange}
              textColor="accent"
            >
              <Tab label="Сумма" icon={<AccountBalanceWallet />} />
              <Tab label="Оплата" icon={<CreditCard />} />
              <Tab label="Результат" disabled icon={<DoneAll />} />
            </Tabs>

            {this.getStepContent(stepIndex)}

          </CardContent>

          <CardActions>
            {buttons}
          </CardActions>
        </Card>
      </div>
    );
  }
}

Payment.defaultProps = defaultProps;

Payment.contextTypes = { 
};
 

export default Payment
