import React, {Component} from 'react';

import Card, { CardContent, CardActions, CardHeader, CardMedia} from 'material-ui/Card';

import { createStyleSheet } from 'jss-theme-reactor';
import customPropTypes from 'material-ui/utils/customPropTypes';

import Grid from 'material-ui/Grid';
import BalanceIcon from 'material-ui-icons/BlurCircular';
import BuyActionIcon from 'material-ui-icons/Payment';
import DownloadActionIcon from 'material-ui-icons/FileDownload';
import Button from 'material-ui/Button';
import Dialog, {DialogContent, DialogActions, DialogTitle} from 'material-ui/Dialog';
import Typography from 'material-ui/Typography';
import ExtAvatar from '../../../Avatar';

const defaultProps = {
  expanded: true,
  open_dialog: false,
}

const styleSheet = createStyleSheet('Package', (theme) => ({
  root: {
    marginTop: 20,
    marginBottom: 20,
    // '& div': {
    //   border: "1px solid",
    // },
    // border: "1px solid",
  },

  CardContent: {

    '&, &:last-child': {

      padding: 15,
    },


    '& > *': {

      // border: "1px solid",
    },
  },
  // button: {
  //   margin: theme.spacing.unit,
  // },

  leftBlock: {
    height: '100%',
  },
  span: {

    display: "inline-flex",

    '&, & *': {

      height: 36,
      lineHeight: "36px",
      verticalAlign: "middle",
    },
  },
}));

var classes;

export default class Package extends Component {

  constructor(props){
    super(props);

    var state = props.data || {};

    Object.assign(state, {
      expanded: props.expanded,
      open_dialog: props.open_dialog,
    });

    this.state = state;
  }


  componentWillReceiveProps(nextProps){


    // console.log('componentWillReceiveProps', this.state.id);
    /*
    * Если авторизовался пользователь, то учитываем его заказы
    * */
    if(
      nextProps.user
      && nextProps.user.id > 0
      && nextProps.user.id != this.props.user.id
    ){
      if(
        nextProps.user.orders
        && nextProps.user.orders.length
      ){
        nextProps.user.orders.map(function(order){
          // console.log('order', order);

          if(order.product_id == this.state.id){
            this.setState({
              order_id: order.id,
              order_status: order.status_id,
            });
            // alert("finded");
            return false;
          }

        }, this);
      }
    }

    return true;
  }

  handleLogin(){
    this.props.userActions.loginClicked();
  }

  handleDialogOpen = () => {
    this.setState({
      open_dialog: true,
    });
  };

  handleDialogClose = (confirm) => {
    // console.log('confirm', confirm);

    if(confirm === true){
      this.handleBuy();
    }
    else{

      this.setState({open_dialog: false});
    }

  };

  handleBuy(){
    var body = new FormData();


    body.append("product_id", this.state.id);
    body.append("order_id", this.state.order_id);

    let action = 'store/extras/buy';

    var headers = new Headers();

    let CONNECTOR_URL = 'assets/components/modxsite/connectors/connector.php';

    fetch(CONNECTOR_URL +'?pub_action=' + action,{
      credentials: 'same-origin',
      headers: headers,
      method: "POST",
      body: body,
    })
      .then(function (response) {
        return response.json()
      })
      .then(function (data) {

        // console.log("data", data);
        var newState = {
          order_id: data.object.id,
          order_status: data.object.status_id,
        };
        
        if(data.success && data.object){

          this.setState(newState);
          this.props.userActions.GetOwnData();

          Object.assign(newState, {
            open_dialog: false,
          });

          this.props.documentActions.addInformerMessage(data.message || "Компонент успешно приобретен");
        }
        else{

          this.props.documentActions.addInformerMessage(data.message || "Ошибка выполнения запроса");

          var errors = [];

          if(data.data){
            data.data.map(function(item){
              errors.push(item.msg);
            });
          }
        }
        
        this.setState(newState);
      }.bind(this))
      .catch((error) => {
        console.log('Request failed', error);
        this.props.documentActions.addInformerMessage("Ошибка выполнения запроса");
      });
  }

  componentWillMount(){
    classes = this.context.styleManager.render(styleSheet);
  }

  render(){

    var price;

    price = <span
      className={classes.span}
    >
      {this.state.price > 0 ? <span><BalanceIcon/>{this.state.price}</span> : "Бесплатно" }
      </span>

    var buttons = [];

    if(this.props.user.id > 0){

      var allowToDownload = false;

      /*
      * Платные пакеты
      * */
      if(this.state.price > 0){

        /*
        * Если пакет платный, смотрим на наличии и состояние заказа.
        * Если заказ есть и статус у него 8 (оплачен), то позволяем скачать.
        * Если есть, но статус 2 (Оформлен), то не даем его скачивать.
        * */

        if(this.state.order_status == 8){
          allowToDownload = true;
        }
        else{
          buttons.push(<Button
            key="buy"
            onTouchTap={this.handleDialogOpen.bind(this)}
            accent
          >
            <BuyActionIcon /> Купить
          </Button>);
        }

      }
      else{
        allowToDownload = true;
      }


      if(allowToDownload == true){
        buttons.push(<Button
          key="download"
          primary
          href={"/downloads/package.zip?pid=" + this.state.id}
        >
          <DownloadActionIcon /> Скачать
        </Button>);
      }

    }
    else{
      buttons.push(<Button
        key="auth"
        onTouchTap={this.handleLogin.bind(this)}
      >Авторизоваться</Button>);
    }

    return <Card className={classes.root}>

      <CardContent className={classes.CardContent}>

        <Grid
          container
          gutter={0}
        >
          <Grid
            item
            xs={12}
            sm={6}
          >
            <Grid
              container
              gutter={0}
              className={classes.leftBlock}
              justify="space-between"
            >

              <Grid
                item
                xs={12}
              >
                <Typography type="title">
                  {this.state.pagetitle}
                </Typography>
              </Grid>

              <Grid
                container
                gutter={0}
                direction="column"
                justify="flex-end"
                // justify-content: flex-end; */
                //* display: flex; */
                //* flex-direction: column; */
              >
                <Grid container>
                  {price}
                  {buttons}
                </Grid>

              </Grid>

            </Grid>

          </Grid>
          <Grid
            item
            xs={12}
            sm={6}
          >
            <CardHeader
              title="Ланец Николай"
              subheader="MODX-Клуб"
              avatar={<ExtAvatar
                avatar="/assets/society/uploads/images/9da9e7e309fd4e77cf42c02a7a42142e.jpeg"
              />}
              style={{
                float: "right",
                padding: 10,
              }}
            />
          </Grid>
        </Grid>


        {this.state.content != "" ? <div expandable={false}>{this.state.content}</div> : null}


        <Dialog
          open={this.state.open_dialog}
        >

          <DialogTitle>Подтверждение оплаты</DialogTitle>

          <DialogContent>

            Оплатить компонент {this.state.release_title}?
          </DialogContent>

          <DialogActions>
            <Button
              onTouchTap={this.handleDialogClose.bind(this, false)}
            >Отмена</Button>
            <Button
              onTouchTap={this.handleDialogClose.bind(this, true)}
              accent
            >Да</Button>
          </DialogActions>

        </Dialog>

      </CardContent>
    </Card>;
  }
}

Package.defaultProps = defaultProps;

Package.contextTypes = {
  styleManager: customPropTypes.muiRequired,
};