import React from 'react';

import PropTypes from 'prop-types';

import moment from 'moment';

import Pagination from '../../pagination';
import Avatar from '../../Avatar';

import {DataStore, Dispatcher} from 'react-cms-data-view';

import Grid from 'material-ui/Grid';
import Typography from 'material-ui/Typography';
import Paper from 'material-ui/Paper';
import Table, { TableBody, TableCell, TableHead, TableRow } from 'material-ui/Table';
import List, {
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  ListSubheader,
} from 'material-ui/List';

import {Link} from 'react-router-dom';

import SuccessIcon from 'material-ui-icons/Check';
import FailureIcon from 'material-ui-icons/Clear';

import IndexView from '../index/';

import Companies from './sections/companies/';
import Projects from './sections/portfolio/';

import CompaniesList from '../companies/list';
import ProfilesList from '../profiles/list';
import WorksList from '../works/list';


export default class OfficeView extends IndexView {

  static contextTypes = {
    request: PropTypes.func.isRequired,
    companiesStore: PropTypes.object.isRequired,
    membersStore: PropTypes.object.isRequired,
    projectsStore: PropTypes.object.isRequired,
  };

  constructor(props){

    super(props);

    Object.assign(this.state, {
      // pagetitle: "Личный кабинет",
      // pageHeader: "Личный кабинет",
      // projectsStore: new DataStore(new Dispatcher()),
    });

  }



  componentDidMount(){

    let {
      companiesStore,
      projectsStore,
    } = this.context;

    this.companiesStoreListener = companiesStore.getDispatcher().register(payload => {
      this.forceUpdate();
    });

    let {
    } = this.state;

    this.projectsStoreListener = projectsStore.getDispatcher().register(payload => {
      this.forceUpdate();
    });

    this.loadProjects();

    return super.componentDidMount && super.componentDidMount();
  }

  componentWillUnount(){

    let {
      companiesStore,
      projectsStore,
    } = this.context;

    let {
    } = this.state;

    this.companiesStoreListener && companiesStore.getDispatcher().unregister(this.companiesStoreListener);
    this.projectsStoreListener && projectsStore.getDispatcher().unregister(this.projectsStoreListener);

    return super.componentDidMount && super.componentDidMount();
  }


  loadProjects(){

    let {
      request,
      projectsStore,
    } = this.context;

    let {
    } = this.state;

    let {
      user: {
        id: user_id,
      },
    } = this.props.user || {};

    if(!user_id){
      return;
    }

    request("user_works", false, 'portfolio/projects/getdata', {
      member_id: user_id,
      format: "json",
      limit: 0,
    }, {
      callback: (data, errors) => {

        // console.log("user_members callback", data, errors);

        if(data.success && data.object){
          let storeState = projectsStore.getState();
          
          data.object.map(n => {
            if(!storeState.find(c => c.id == n.id)){
              storeState = storeState.push(n);
            }
          });

          projectsStore.getDispatcher().dispatch(projectsStore.actions['SET_DATA'], storeState);
        }

        return;
      }
    });

    return;
  }


  getMenu(){

    let {
      user: {
        user,
      },
      router,
    } = this.props;

    let {
      section,
      action,
    } = router && router.params || {};

    if(section){
      return null;
    }

    let {
      username,
    } = user || {};

    return null;

    return <List>
      <Link
        to={`/profile/${username}`}
        href={`/profile/${username}`}
      >
        <ListItem
          button
        > 
          Редактировать профиль
        </ListItem>
      </Link>

      <Link
        to={`/office/company/`}
        href={`/office/company/`}
      >
        <ListItem
          button
        > 
          Управление компаниями
        </ListItem>
      </Link>
    </List>
  }

  renderContent(){

    let {
      router,
    } = this.props;


    let {
      section,
      action,
    } = router && router.params || {};
 

    let content = null;

    switch(section){
      case 'company':

        return this.renderCompaniesSection();

        break;

      case 'portfolio':

        return this.renderProjectsSection();

        break;

      default:
        // return ;
    }



    return content;
  }

  renderCompaniesSection(){

    // this.setPagetitle("Управление компаниями");
    // this.getPageHeader("Управление компаниями");

    return <Companies
      {...this.props}
    />
  }

  renderProjectsSection(){

    let {
      projectsStore,
    } = this.context;

    return <Projects
      projectsStore={projectsStore}
      {...this.props}
    />
  }


  renderCompanies(){

    let {
      companiesStore,
    } = this.context;

    let {
      user,
    } = this.props;

    let content;

    // console.log("companiesStore", companiesStore.getState());

    let companies = [];

    let storeState = companiesStore.getState();


    if(!storeState.size){
      content =  <Typography
      >
        У вас нет ни одной команды. <Link
          to={`/office/company/create/`}
          href={`/office/company/create/`}
        >Создать команду</Link>
      </Typography>
    }
    else{
      content = <CompaniesList
        companies={companies || []}
        user={user}
      />;
    }

    storeState.map(n => companies.length < 10 && companies.push(n));

    // console.log('companies list', companies);


    return <div>
      
      <Typography 
        type="subheading"
        style={{
          marginBottom: 5,
        }}
      >
        Команды
      </Typography>

      {content}

    </div>
  }

  renderMembers(){

    let {
      membersStore,
    } = this.context;



    // console.log("membersStore", membersStore.getState());

    let users = [];

    membersStore.getState().map(n => users.push(n));

    // console.log('companies list', companies);

    return <div>
      
      <Typography 
        type="subheading"
        style={{
          marginBottom: 5,
        }}
      >
        Коллеги
      </Typography>

      <ProfilesList
        profiles={users}
      />
    </div>
  }


  renderWorks(){

    let {
      projectsStore,
    } = this.context;

    let {
      user,
    } = this.props;

    // console.log("membersStore", membersStore.getState());

    let works = [];

    projectsStore.getState().map(n => works.push(n));

    // console.log('companies list', companies);

    return <div>
      
      <Typography 
        type="subheading"
        style={{
          marginBottom: 5,
        }}
      >
        Портфолио
      </Typography>

      <WorksList
        works={works}
        page={0}
        limit={0}
        total={works.length}
        user={user}
      />

    </div>
  }


  contentBlock(){
 

    let {
      router,
      user: {
        user,
      },
    } = this.props;


    let {
      section,
      action,
    } = router && router.params || {};


    if(!user){
      return <Typography
        type="title"
      >
        Требуется авторизация
      </Typography>
    }


    if(section){
      return this.renderContent();
    }


    return <div>
      
      {this.getPageHeader("Личный кабинет")}

      <Grid
        container
      >


        <Grid
          item
        >
          {this.getMenu()}
        </Grid>

        <Grid
          item
          xs={12}
        >
          {this.renderCompanies()}
        </Grid>

        <Grid
          item
          xs={12}
        >
          {this.renderMembers()}
        </Grid>

        <Grid
          item
          xs={12}
        >
          {this.renderWorks()}
        </Grid>

        
      </Grid> 

    </div>;
  }
}
