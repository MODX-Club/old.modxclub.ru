import React, {Component} from 'react';

import PropTypes from 'prop-types';

import Grid from 'material-ui/Grid';
import Typography from 'material-ui/Typography';

import List, {
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  ListSubheader,
} from 'material-ui/List';

import {Link} from 'react-router-dom';

import OfficeSectionLayout from '../layout';

import ProjectCard from './project';

import WarningMessage from '../../../../fields/warning';

export default class OfficeProjectsSection extends OfficeSectionLayout{


  static contextTypes = {
		projectsStore: PropTypes.object.isRequired,
  };

 //  static propTypes = {
	// };
 


 	getMenu(){

    let {
      user: {
        user,
      }
    } = this.props;

    let {
      username,
    } = user || {};

    return <List> 

      <Link
        to={`/office/`}
        href={`/office/`}
      >
        <ListItem
          button
        > 
          В начало
        </ListItem>
      </Link>
    </List>
  } 

  renderDefaultBlock(){

    let {
      projectsStore,
    } = this.context;

    let content;

    // console.log('projectsStore.getState()', projectsStore.getState());

    if(!projectsStore.getState().size){
      content = <Typography>
        У вас нет ни одной работы в портфолио. <Link
          to={`/office/projects/create/`}
          href={`/office/projects/create/`}
        >
          Добавьте свою первую работу.
        </Link>
      </Typography>;
    }



    return content;
  }



  getPageHeader(pagetitle){

    // return super.getPageHeader("Управление wefew");
  }

  setPagetitle(title){
 

    // return super.setPagetitle("Управление wefewf");
  }

 	renderContent(){

    let {
      router: {
        params: {
          // section,
          action,
          id,
        },
      },
    } = this.props;

    let {
    	projectsStore,
    } = this.props;

    let content;

    switch(action){

      case 'create':

        content = <ProjectCard 
          projectsStore={projectsStore}
        />

        break;

    	case 'edit':

        if(!id){

          return <WarningMessage>
            Не был получен ID
          </WarningMessage>;
        }

        let item = projectsStore.getState().find(n => n.id == id);

        // console.log("projectsStore", projectsStore.getState());
        // console.log("item", id, item);

        if(!item){

          return <WarningMessage>
            Не была получена работа
          </WarningMessage>;
        }

  		  return <ProjectCard 
          projectsStore={projectsStore}
    			item={item}
    		/>

    		break;

    	default: content = this.renderDefaultBlock();
    }

    return content;
 	}
} 