import * as env from '../actions/documentActions';

var md5 = require('md5');


import {DataStore, Dispatcher} from 'react-cms-data-view';

// let notifications_store = new DataStore(new Dispatcher());

// console.log("init_store 2", notifications_store);

const initialState = {
  document: false,
  document_initialization_requested: false,
  document_view: 'Index',
  informerMessage: '',
  requested_url: '',
  stores: {},
};

/*
 * */

export default function (state = initialState, action) {

  var st = Object.assign({},state);

  switch (action.type) {

    case env.INITIALIZATION_REQUESTED:

      st.document_initialization_requested = true;
      st.document_initialized = false;
      st.document_initialization_failed = false;
      break;

    case env.INFORMER_MESSAGE_ADDED:

      // console.log("INFORMER_MESSAGE_ADDED", st);

      let {
        notifications_store,
      } = st.stores || {};

      if(notifications_store){

        // console.log("INFORMER_MESSAGE_ADDED 2", notifications_store);

        var dispatcher = notifications_store.getDispatcher();

        var {message} = action;

        if(typeof message != "object"){
          message = {
            text: message,
            autohide: 4000,
          };
        }


        var {autohide} = message;

        // console.log("CREATED", message);

        if(!message.handleClose){
          message.handleClose = () => {
            dispatcher.dispatch(notifications_store.actions['REMOVE'], message);
          }
        }

        if(autohide && autohide > 0){
          setTimeout(message.handleClose, autohide);
        }

        dispatcher.dispatch(notifications_store.actions['CREATE'], message);


        // console.log("INFORMER_MESSAGE_ADDED 3", notifications_store.getState());
      }

      break;

    case env.INFORMER_MESSAGE_REMOVED:

      // var dispatcher = notifications_store.getDispatcher();

      // dispatcher.dispatch(notifications_store.actions['REMOVE'], action.message);

      break;

    case env.INFORMER_MESSAGE_SHOWED:

      st.informerMessage = "";
      break;

    case env.LOAD_DOCUMENT_REQUESTED:

      st.requested_url = action.url;
      break;

    case env.DOCUMENT_LOADED:

      st.document = action.document;
      break;

    case env.VIEW_SWITCHED:
      st.document_view = action.view;

      if(action.data){
        Object.assign(st, action.data);
      }
      break;

    default:
      ;
  }
  return st
}
