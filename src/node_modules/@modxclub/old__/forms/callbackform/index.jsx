import React, { Component } from 'react';

import { createStyleSheet } from 'jss-theme-reactor';
import customPropTypes from 'material-ui/utils/customPropTypes';

import Button from 'material-ui/Button';
import TextField from 'material-ui/TextField';
import SelectField from '../../SelectField';
// import CircularProgress from 'material-ui/CircularProgress';
import { CircularProgress } from 'material-ui/Progress';
import Menu, {MenuItem} from 'material-ui/Menu';
import Card, { CardActions, CardHeader } from 'material-ui/Card';
import IconSend from 'material-ui-icons/Send';
 
import Dialog, {
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from 'material-ui/Dialog';
import {FormControl} from 'material-ui/Form';
import Input, { InputLabel } from 'material-ui/Input';
import Paper from 'material-ui/Paper';
import Typography from 'material-ui/Typography';

import { CONNECTOR_URL } from '../../const';

const defaultProps = {
  errors: {},
  sending: false,
  committed: false,
  name: "",
  site: "",
  contact: "",
  message: "",
  type: "",
}


const styleSheet = createStyleSheet('Chips', (theme) => ({
  root: {
  },
  form: {
    '& > *': {
        marginTop: 15,
    },
  },
  textfield: {
  },
  textarea: {
    // margin: '50px 0',
    position: "relative",
    marginTop: 10,
    marginBottom: 10,
    minHeight: 20,
    padding: '6px 0',
    border: 'none',
    outline: 'none',
    borderBottom: `1px solid ${theme.palette.text.divider}`,
  },
  inputLabel: {
    fontFamily: theme.typography.fontFamily,
    color: theme.palette.text.secondary,
    lineHeight: 1,
  },
  paper: {
    padding: 15,
  },
}));

var classes;

class CallbackForm extends Component {

  constructor(props) {
    super(props);
    this.state = {
      value: props.value,
      errors: props.errors,
      sending: props.sending,
      committed: props.committed,
      typeAnchorEl: null,
      typeSelectorOpen: false,
      name: props.name,
      site: props.site,
      contact: props.contact,
      message: props.message,
      type: props.type,
    };
  };

  handleChange = (event) => {

    var name = event.target.name || event.target.attributes.name && event.target.attributes.name.nodeValue;
    var value = event.target.value || event.target.innerText;

    this.clearError({
      target: {
        name: name,
      }
    });

    var newState = {};

    newState[name] = value;

    this.setState(newState);
  }

  handleEnter = (event) => {
    if (event.key == 'Enter') {
      this.submit()
    }
  }

  clearError = (event) => {
    // console.log('clearError', this, event);
    // console.log('clearError target', event.target, event.Target);
    // console.log('clearError handler', event.handler, event.Handler);

    var errors = this.state.errors;
    errors[event.target.name] = "";

    this.setState({errors});
  }

  submit = () => {
    if (!this.state.sending) {

      var body = new FormData();


      // console.log("text", text);

      var data = {
        name: this.state.name,
        contact: this.state.contact,
        site: this.state.site,
        type: this.state.type,
        message: this.state.message,
      };

      for(var i in data){
        var value = data[i];

        if(!value || value == ""){
          continue;
        }

        body.append(i, data[i]);
      };


      // console.log('Send message', data);
      //

      let action = 'forms/services/order';

      // alert(action);
      // return;

      var headers = new Headers();

      fetch(CONNECTOR_URL +'?pub_action=' + action,{
        credentials: 'same-origin',
        headers: headers,
        method: "POST",
        body: body,
      })
        .then(function (response) {
          // console.log('LOGIN RESPONSE',response.json());
          return response.json()
        })
        .then(function (data) {
          // console.log('LOGIN DATA', data);
          // self.setState({orders: data.object});

          if(data.success){
            this.setState({
              committed: true,
            });
          }
          else{

            var newState = {
              sending: false
            };


            Object.assign(newState, {
              errors: {}
            });

            if (!data.success) {
              let errors = {};
              data.data.forEach((field) => errors[field.id] = field.msg);

              // this.setState({ errors });

              Object.assign(newState.errors, errors);

            }
            else {
              newState.committed = true;
              // newState.value = null;
              // this.refs.callbackForm.reset();
            }

            this.setState(newState);

            this.props.documentActions.addInformerMessage(data.message || "Ошибка выполнения запроса");
          }
        }.bind(this))
        .catch((error) => {
            console.error('Request failed', error);
            this.props.documentActions.addInformerMessage("Ошибка выполнения запроса");
          }
        );

    }
  }


  handleClose = () => {
    // console.log('defaultProps', defaultProps);
    //
    // this.setState(defaultProps);

    this.setState({
      committed: false,
    });
  };

  componentWillMount(){
    classes = this.context.styleManager.render(styleSheet);
  }

  onTypeMenuClose(){
    this.setState({
      typeSelectorOpen: false,
    })
  }

  selectTypeHandler(event){
    this.setState({
      type: event.target.attributes && event.target.attributes.value && event.target.attributes.value.value ? event.target.attributes.value.value : "",
    });
    this.onTypeMenuClose();
  }

  render() {
    return !this.state.committed
      ?
      <Paper className={[classes.paper, "paper"].join(" ")}>
        <Typography type="title" >Напишите нам</Typography>

        <form
          
          className={classes.form}
        >
          <TextField
            name="name"
            label={"Ваше имя *" + (this.state.errors['name'] && this.state.errors['name'] != "" ? ` (${this.state.errors['name']})` : '')}
            onKeyPress={this.handleEnter}
            onFocus={this.clearError}
            onChange={this.handleChange}
            error={this.state.errors['name'] && this.state.errors['name'] != ""}
          />

          <TextField
            name="contact"
            label={"E-mail или телефон *" + (this.state.errors['contact'] && this.state.errors['contact'] != "" ? ` (${this.state.errors['contact']})` : '')}
            onKeyPress={this.handleEnter}
            onFocus={this.clearError}
            onChange={this.handleChange}
            error={this.state.errors['contact'] && this.state.errors['contact'] != ""}
          />

          <TextField
            name="type"
            label={"Цель обращения *" + (this.state.errors['type'] && this.state.errors['type'] != "" ? ` (${this.state.errors['type']})` : '')}
            value={this.state.type}
            error={this.state.errors['type'] && this.state.errors['type'] != ""}
            onKeyPress={this.handleEnter}
            onFocus={this.clearError}
            aria-owns="type-selector"
            aria-haspopup="true"
            onTouchTap={(event) => {
              this.setState({
                typeSelectorOpen: true,
                typeAnchorEl: event.currentTarget,
              })
            }}
          />
          <Menu
            id="type-selector"
            anchorEl={this.state.typeAnchorEl}
            open={this.state.typeSelectorOpen}
            onRequestClose={() => {this.onTypeMenuClose()}}
          >
            <MenuItem value={'Техническая оптимизация'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Техническая оптимизация</MenuItem>
            <MenuItem value={'Разработка веб-сайтов'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Разработка веб-сайтов</MenuItem>
            <MenuItem value={'Техническая поддержка'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Техническая поддержка</MenuItem>
            <MenuItem value={'Перенос MODX-сайта на хостинг'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Перенос MODX-сайта на хостинг</MenuItem>
            <MenuItem value={'Перенос сайта на MODX'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Перенос сайта на MODX</MenuItem>
            <MenuItem value={'Продвижение сайтов'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Продвижение сайтов</MenuItem>
            <MenuItem value={'Аудит веб-сайта'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Аудит веб-сайта</MenuItem>
            <MenuItem value={'Настройка корпоративной почты'} onTouchTap={(event) => {this.selectTypeHandler(event)}}>Настройка корпоративной почты</MenuItem>
          </Menu>

          <TextField
            name="site"
            label={"Адрес сайта" + (this.state.errors['site'] && this.state.errors['site'] != "" ? ` (${this.state.errors['site']})` : '')}
            onKeyPress={this.handleEnter}
            onFocus={this.clearError}
            onChange={this.handleChange}
            error={this.state.errors['site'] && this.state.errors['site'] != ""}
          />


          <FormControl
          >
            <InputLabel
              shrink={this.state.message != ""}
              className={classes.inputLabel}
            >
              Сообщение
            </InputLabel>
            <div
              name="message"
              contentEditable
              value={this.state.message}
              onKeyUp={this.handleChange}
              className={classes.textarea}
              rows="10"
            ></div>
          </FormControl>
        </form>

        <CardActions
          style={{ textAlign: 'right' }}
        >
          <Button
            icon={this.state.sending ? <CircularProgress size={24} thickness={2}/> : <IconSend />}
            onTouchTap={this.submit}
            raised
          >
            Отправить сообщение
          </Button>
        </CardActions>
      </Paper>
      :
      <Dialog
        open={true}
        onRequestClose={this.handleClose}
      >
        <DialogTitle>Ваше сообщение отправлено</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Постараемся ответить вам как можно скорее.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button
            keyboardFocused={true}
            onTouchTap={this.handleClose}
          >
            Закрыть
          </Button>
        </DialogActions>
      </Dialog>
    ;
  }
}

CallbackForm.defaultProps = defaultProps;

CallbackForm.contextTypes = {
  styleManager: customPropTypes.muiRequired,
};
 

export default CallbackForm
