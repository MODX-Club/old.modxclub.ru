import React, { Component } from 'react';
import ReactDOM from 'react-dom';



import List, {ListSubheader, ListItem} from 'material-ui/List';

import ChatMessage from '../chat/message/index';

export default class ArticleInfoComments extends Component {


  constructor(props) {
    super(props);
    // this.componentDidMount = this.componentDidMount.bind(this);
    // this.componentDidUpdate = this.componentDidUpdate.bind(this);
  }

  // shouldComponentUpdate({children}, nextState){
  //   return this.props.children !== children;
  // }

  componentDidMount() {
    // hljs.highlightBlock(ReactDOM.findDOMNode(this));

  }

  listContent(comments, output = [], level = 0){

    for(var i in comments){
      var item = comments[i];
      output.push(<ChatMessage
        key={item.key || item.ts || item.id} item={item}
        user={this.props.user}
        documentActions={this.props.documentActions}
        document={this.props.document}
      />);
        {/*onBeforeSendMessage={this.onBeforeSendMessage.bind(this)}*/}
      // var avatar;
      // if(comment.author_avatar){
      //   avatar = (<Avatar src={comment.author_avatar} />);
      // } else {
      //   avatar = (<Avatar>{comment.author_username.substr(0,1).toUpperCase()}</Avatar>);
      // }
      //
      // var buttons = [];
      // var user = this.props.user || {};

      // if(user){
      //   buttons.push(<span key="reply" style={style.listItemLink}>Ответить</span>);
      //
      //   if(user.id == comment.createdby){
      //     buttons.push(<span key="edit" style={style.listItemLink}>Редактировать</span>);
      //     buttons.push(<span key="delete" style={style.listItemLink}>Удалить</span>);
      //   }
      // }

      // output.push(
      //   <ListItem
      //     key={comment.id}
      //     id={'#comment-'+ comment.id}
      //     leftAvatar={avatar}
      //     primaryText={comment.author_username}
      //     secondaryText={
      //       <div style={style.listItemSecondaryText}>
      //         <small style={style.listItemDate}>{comment.createdon}</small>
      //         <span style={style.listItemBlock}>
      //           {comment.parent
      //             ? (<span><a style={style.articleMoreLink} href={'#comment-'+ comment.parent}>{comment.parent_user}</a>, </span>)
      //             : ''}
      //           <div dangerouslySetInnerHTML={{ __html: comment.text }} />
      //           {/*<span >{/\<pre /.test(comment.text) ? hljs.highlightBlock('<pre style="dfdfg"><code>alert("wefwefwe")</code></prestyle>') :comment.text }</span>*/}
      //         </span>
      //         <span style={style.listItemBlock}>
      //           {buttons}
      //         </span>
      //       </div>
      //     }
      //     nestedLevel={level}
      //     disabled={true}
      //   />
      // )
      //
      // if(comment.children && comment.children.length){
      //   output = output.concat(this.listContent(comment.children, [], level +1));
      //   // console.log(output, level)
      // }
    }
    return output;
  }

  makeReply(){
  }

  render(){


    var self = this;

    var comments = this.props.comments || [];
    var subheader = 'Комментариев нет';

    var listContent = false;

    /*return (<div>sdfsdf</div>);*/


    let styles = {
      padding: "5px",
      margin: 0,
      borderRadius: '0 0 2px 2px',
      // borderTop: 'solid 1px ' + borderColor,
    };

    // var code = 'MODx.form.Handler = Ext.ComponentMgr.create({xtype: "test-form-handler"});';
    //
    // return (
    //   <pre style={styles}>
    //         <code>
    //           {code}
    //         </code>
    //       </pre>
    // );

    if(comments.length){
      subheader = 'Комментарии - '+ this.props.document.comments_count;

      let props = this.props;
      listContent = [].concat(this.listContent(comments));
    }
    return (
        <List>
          <ListSubheader>{subheader}</ListSubheader>
          {listContent}
        </List>
    );
  }
}

// function mapStateToProps(state) {
//   return state.article;
// }

// function mapDispatchToProps(dispatch) {
//   return {
//     articleCommentReply: bindActionCreators(articleActions.articleCommentReply, dispatch)
//   }
// }

// export default connect(state => state.article)(ArticleInfoComments);
