import React, {Component} from 'react';
import { createStyleSheet } from 'jss-theme-reactor';
import customPropTypes from 'material-ui/utils/customPropTypes';

 

import Badge from 'material-ui/Badge';
import IconButton from 'material-ui/IconButton';
import Menu, {IconMenu} from 'material-ui/Menu';
import Divider from 'material-ui/Divider';
import Popover from 'material-ui/internal/Popover';

import List, {
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemSecondaryAction,
  ListSubheader
} from 'material-ui/List';

import ActionClose from 'material-ui-icons/Close';
import ActionAssignment from 'material-ui-icons/Assignment';
import NotificationsIcon from 'material-ui-icons/Notifications';

const styleSheet = createStyleSheet('SimpleBadge', (theme) => ({
  badge: {
    margin: `5px ${theme.spacing.unit * 2}px 0`,
    cursor: 'pointer',
  },
  menu: {
    width: '100%',
    minWidth: 360,
    maxWidth: 360,
    background: theme.palette.background.paper,
  },
  icon: {
    color: theme.colors.info,
  }
}));

var classes;

class NotificationListItem extends Component{

  ClearNotice(){
    this.props.clear_message_action(this.props.data);
  }

  render(){

    var data = this.props.data || {};

    return <ListItem button>
      <ListItemIcon className={this.props.className}>
        <ActionAssignment/>
      </ListItemIcon>
      <ListItemText
        primary={data.text}
        secondary={new Date(data.ts).toLocaleTimeString('en-US', { hour12: false })}
      />
      <ListItemSecondaryAction>
        <IconButton>
          <ActionClose onTouchTap={this.ClearNotice.bind(this)}/>
        </IconButton>
      </ListItemSecondaryAction>
    </ListItem>;
  }
}

class Notifications extends Component {

  constructor(props){

    super(props);

    this.state = {}
  }

  ClearNotifications(){
    this.props.userActions.ClearNotifications();
  }

  handleClick = (event) => this.setState({
    open: true,
    anchorEl: event.currentTarget,
  });

  componentWillMount(){
    classes = this.context.styleManager.render(styleSheet);

    // this.props.notifications.push({
    //   text: "SDfdsf",
    //   ts: new Date().getTime(),
    // });
  }

  render(){

    var icon;

    var notifications = this.props.notifications;


    if(notifications && notifications.length){

      var list = [];

      var limit = 5;
      var count = 0;

      var i = notifications.length;

      while(i > 0){

        i--;

        if(count >= limit){
          break;
        }

        count++;

        var item = notifications[i];

        if(count > 1){
          list.push(<Divider
            key={'divider-' + item.ts}
          />);
        }

        list.push(<NotificationListItem
          key={item.ts}
          data={item}
          clear_message_action={this.props.userActions.ClearNotice}
          className={classes.icon}
        />);

      }

      // console.log('notifications', notifications, list);

      var icon = <Badge
        className={classes.badge}
        badgeContent={notifications.length}
        accent
        onClick={this.handleClick}
      >
        <NotificationsIcon />

        <Popover
          id="notifications-menu"
          anchorEl={this.state.anchorEl}
          open={this.state.open}
          onRequestClose={() => {
            this.setState({
              open: false,
            });
          }}
          className={classes.menu}
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'right',
          }}
          transformOrigin={{
            vertical: 'top',
            horizontal: 'right',
          }}
        >
          <List subheader={<ListSubheader>Уведомления</ListSubheader>}>
            {list}
          </List>
        </Popover>
      </Badge>;

    }
    else{
      icon = <IconButton
        contrast
        >
          <NotificationsIcon

          />
        </IconButton>;
    }

    return icon;
  }
}


Notifications.contextTypes = {
  styleManager: customPropTypes.muiRequired,
};
 
export default Notifications
